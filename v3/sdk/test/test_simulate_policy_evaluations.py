# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.simulate_policy_evaluations import SimulatePolicyEvaluations

class TestSimulatePolicyEvaluations(unittest.TestCase):
    """SimulatePolicyEvaluations unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SimulatePolicyEvaluations:
        """Test SimulatePolicyEvaluations
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SimulatePolicyEvaluations`
        """
        model = SimulatePolicyEvaluations()
        if include_optional:
            return SimulatePolicyEvaluations(
                status = 'MATCH',
                policy_type = [
                    'ACCESS_POLICY'
                    ],
                result = openapi_client.models.simulate_policy_result.SimulatePolicyResult(
                    policies = [
                        openapi_client.models.simulate_result_policies_items.SimulateResultPoliciesItems(
                            id = '', 
                            name = '', 
                            status = '', 
                            conditions = openapi_client.models.simulate_result_conditions.SimulateResultConditions(
                                status = 'MATCH', 
                                type = '', ), 
                            rules = openapi_client.models.simulate_result_rules.SimulateResultRules(
                                id = '', 
                                name = '', 
                                status = 'MATCH', ), )
                        ], ),
                undefined = openapi_client.models.simulate_policy_evaluations_undefined.SimulatePolicyEvaluations_undefined(
                    policies = [
                        openapi_client.models.simulate_result_policies_items.SimulateResultPoliciesItems(
                            id = '', 
                            name = '', 
                            status = '', 
                            conditions = openapi_client.models.simulate_result_conditions.SimulateResultConditions(
                                status = 'MATCH', 
                                type = '', ), 
                            rules = openapi_client.models.simulate_result_rules.SimulateResultRules(
                                id = '', 
                                name = '', 
                                status = 'MATCH', ), )
                        ], ),
                evaluated = openapi_client.models.simulate_policy_evaluations_evaluated.SimulatePolicyEvaluations_evaluated(
                    policies = [
                        openapi_client.models.simulate_result_policies_items.SimulateResultPoliciesItems(
                            id = '', 
                            name = '', 
                            status = '', 
                            conditions = openapi_client.models.simulate_result_conditions.SimulateResultConditions(
                                status = 'MATCH', 
                                type = '', ), 
                            rules = openapi_client.models.simulate_result_rules.SimulateResultRules(
                                id = '', 
                                name = '', 
                                status = 'MATCH', ), )
                        ], )
            )
        else:
            return SimulatePolicyEvaluations(
        )
        """

    def testSimulatePolicyEvaluations(self):
        """Test SimulatePolicyEvaluations"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
