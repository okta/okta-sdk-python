# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.user_policy_rule_condition import UserPolicyRuleCondition

class TestUserPolicyRuleCondition(unittest.TestCase):
    """UserPolicyRuleCondition unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UserPolicyRuleCondition:
        """Test UserPolicyRuleCondition
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UserPolicyRuleCondition`
        """
        model = UserPolicyRuleCondition()
        if include_optional:
            return UserPolicyRuleCondition(
                exclude = [
                    ''
                    ],
                inactivity = openapi_client.models.inactivity_policy_rule_condition.InactivityPolicyRuleCondition(
                    number = 56, 
                    unit = '', ),
                include = [
                    ''
                    ],
                lifecycle_expiration = openapi_client.models.lifecycle_expiration_policy_rule_condition.LifecycleExpirationPolicyRuleCondition(
                    lifecycle_status = '', 
                    number = 56, 
                    unit = '', ),
                password_expiration = openapi_client.models.password_expiration_policy_rule_condition.PasswordExpirationPolicyRuleCondition(
                    number = 56, 
                    unit = '', ),
                user_lifecycle_attribute = openapi_client.models.user_lifecycle_attribute_policy_rule_condition.UserLifecycleAttributePolicyRuleCondition(
                    attribute_name = '', 
                    matching_value = '', )
            )
        else:
            return UserPolicyRuleCondition(
        )
        """

    def testUserPolicyRuleCondition(self):
        """Test UserPolicyRuleCondition"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
