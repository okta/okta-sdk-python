# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.saml_application_settings import SamlApplicationSettings

class TestSamlApplicationSettings(unittest.TestCase):
    """SamlApplicationSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SamlApplicationSettings:
        """Test SamlApplicationSettings
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SamlApplicationSettings`
        """
        model = SamlApplicationSettings()
        if include_optional:
            return SamlApplicationSettings(
                identity_store_id = '',
                implicit_assignment = True,
                inline_hook_id = '',
                notes = openapi_client.models.application_settings_notes.ApplicationSettingsNotes(
                    admin = '', 
                    enduser = '', ),
                notifications = openapi_client.models.application_settings_notifications.ApplicationSettingsNotifications(
                    vpn = openapi_client.models.application_settings_notifications_vpn.ApplicationSettingsNotificationsVpn(
                        help_url = '', 
                        message = '', 
                        network = openapi_client.models.application_settings_notifications_vpn_network.ApplicationSettingsNotificationsVpnNetwork(
                            connection = '', 
                            exclude = [
                                ''
                                ], 
                            include = [
                                ''
                                ], ), ), ),
                app = { },
                sign_on = openapi_client.models.saml_application_settings_sign_on.SamlApplicationSettingsSignOn(
                    acs_endpoints = [
                        openapi_client.models.acs_endpoint.AcsEndpoint(
                            index = 0, 
                            url = 'https://www.example.com/sso/saml', )
                        ], 
                    allow_multiple_acs_endpoints = True, 
                    assertion_signed = True, 
                    attribute_statements = [
                        openapi_client.models.saml_attribute_statement.SamlAttributeStatement(
                            filter_type = '', 
                            filter_value = '', 
                            name = '', 
                            namespace = '', 
                            type = '', 
                            values = [
                                ''
                                ], )
                        ], 
                    audience = '', 
                    audience_override = '', 
                    authn_context_class_ref = '', 
                    configured_attribute_statements = [
                        openapi_client.models.saml_attribute_statement.SamlAttributeStatement(
                            filter_type = '', 
                            filter_value = '', 
                            name = '', 
                            namespace = '', 
                            type = '', )
                        ], 
                    default_relay_state = '', 
                    destination = '', 
                    destination_override = '', 
                    digest_algorithm = '', 
                    honor_force_authn = True, 
                    idp_issuer = '', 
                    inline_hooks = [
                        openapi_client.models.sign_on_inline_hook.SignOnInlineHook(
                            id = '', )
                        ], 
                    participate_slo = openapi_client.models.slo_participate.SloParticipate(
                        binding_type = 'POST', 
                        enabled = True, 
                        logout_request_url = '', 
                        session_index_required = True, ), 
                    recipient = '', 
                    recipient_override = '', 
                    request_compressed = True, 
                    response_signed = True, 
                    signature_algorithm = '', 
                    slo = openapi_client.models.single_logout.SingleLogout(
                        enabled = True, 
                        issuer = '', 
                        logout_url = '', ), 
                    sp_certificate = openapi_client.models.sp_certificate.SpCertificate(
                        x5c = [
                            ''
                            ], ), 
                    sp_issuer = '', 
                    sso_acs_url = '', 
                    sso_acs_url_override = '', 
                    subject_name_id_format = '', 
                    subject_name_id_template = '', )
            )
        else:
            return SamlApplicationSettings(
        )
        """

    def testSamlApplicationSettings(self):
        """Test SamlApplicationSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
