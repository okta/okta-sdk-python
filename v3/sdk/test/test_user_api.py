# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import time

from okta.api.user_api import UserApi
from okta.okta_configuration import OktaConfiguration
from okta.api_client import ApiClient
from okta.exceptions import NotFoundException

from okta.models import (
    CreateUserRequest,
    UserProfile,
    UserType,
    UserStatus
)

class TestUserApi(unittest.TestCase):
    """UserApi unit test stubs"""

    def setUp(self) -> None:
        configuration = OktaConfiguration().get_configuration()
        api_client = ApiClient(configuration)
        self.api = UserApi(api_client)

    def tearDown(self) -> None:
        pass

    def test_activate_user(self) -> None:
        """Test case for activate_user

        Activate a User
        """
        try:
            create_user_request = CreateUserRequest(
                type=UserType(
                    type='test_user_type', 
                    displayName='test_user_type_display_name', 
                    name='test_user_type_name'
                ),
                profile=UserProfile(
                    userType='test_user_type_profile_type', 
                    firstName='John', 
                    lastName='test_create_user',
                    email='test_create_user-python@example.com',
                    login='test_create_user-python@example.com',
                    nickName='test_create_user'
                )
            )
            
            created_user = self.api.create_user(create_user_request)
            
            self.api.deactivate_user(created_user.id)
            
            time.sleep(3)
            
            retreived_user = self.api.get_user(created_user.id)
            self.assertEqual(retreived_user.status, UserStatus.DEPROVISIONED)
            
            self.api.activate_user(created_user.id, False)
            
            time.sleep(3)
            
            retreived_user = self.api.get_user(created_user.id)
            self.assertEqual(retreived_user.status, UserStatus.PROVISIONED)
        except Exception as ex:
            self.fail(ex)
        finally:
            self.api.deactivate_user(created_user.id)
            self.api.delete_user(created_user.id)

        pass

    def test_create_user(self) -> None:
        """Test case for list_users

        List a Users
        """
        try:
            create_user_request = CreateUserRequest(
                type=UserType(
                    type='test_user_type', 
                    displayName='test_user_type_display_name', 
                    name='test_user_type_name'
                ),
                profile=UserProfile(
                    userType='test_user_type_profile_type', 
                    firstName='John', 
                    lastName='test_create_user',
                    email='test_create_user-python@example.com',
                    login='test_create_user-python@example.com',
                    nickName='test_create_user'
                )
            )
            
            created_user = self.api.create_user(create_user_request)
            
            self.assertIsNotNone(created_user.id)
        except Exception as ex:
            self.fail(ex)
        finally:
            self.api.deactivate_user(created_user.id)
            self.api.delete_user(created_user.id)

        pass

    def test_deactivate_user(self) -> None:
        """Test case for deactivate_user

        Deactivate a User
        """
        try:
            create_user_request = CreateUserRequest(
                type=UserType(
                    type='test_user_type', 
                    displayName='test_user_type_display_name', 
                    name='test_user_type_name'
                ),
                profile=UserProfile(
                    userType='test_user_type_profile_type', 
                    firstName='John', 
                    lastName='test_deactivate_user',
                    email='test_deactivate_user-python@example.com',
                    login='test_deactivate_user-python@example.com',
                    nickName='test_deactivate_user'
                )
            )
            
            created_user = self.api.create_user(create_user_request)
            self.assertNotEqual(created_user.status, UserStatus.DEPROVISIONED)
            
            time.sleep(3)  
                      
            self.api.deactivate_user(created_user.id)
            
            time.sleep(3) 
            
            retreived_user = self.api.get_user(created_user.id)
            self.assertEqual(retreived_user.status, UserStatus.DEPROVISIONED)
        except Exception as ex:
            self.fail(ex)
        finally:
            self.api.delete_user(created_user.id)

        pass

    def test_delete_user(self) -> None:
        """Test case for delete_user

        Delete a User
        """

        create_user_request = CreateUserRequest(
            type=UserType(
                type='test_user_type', 
                displayName='test_user_type_display_name', 
                name='test_user_type_name'
            ),
            profile=UserProfile(
                userType='test_user_type_profile_type', 
                firstName='John', 
                lastName='test_delete_user',
                email='test_delete_user-python@example.com',
                login='test_delete_user-python@example.com',
                nickName='test_delete_user'
            )
        )
        
        created_user = self.api.create_user(create_user_request)
        self.assertIsNotNone(created_user.id)
        
        time.sleep(3)
        
        self.api.deactivate_user(created_user.id)
        self.api.delete_user(created_user.id)

        time.sleep(3)
        self.assertRaises(NotFoundException, lambda : self.api.get_user(created_user.id))

        pass

    def test_get_user(self) -> None:
        """Test case for get_user

        Retrieve a User
        """
        try:
            create_user_request = CreateUserRequest(
                type=UserType(
                    type='test_user_type', 
                    displayName='test_user_type_display_name', 
                    name='test_user_type_name'
                ),
                profile=UserProfile(
                    userType='test_user_type_profile_type', 
                    firstName='John', 
                    lastName='test_get_user',
                    email='test_get_user-python@example.com',
                    login='test_get_user-python@example.com',
                    nickName='test_get_user'
                )
            )
            
            created_user = self.api.create_user(create_user_request)
            self.assertIsNotNone(created_user.id)
            
            time.sleep(3)
            retreived_user = self.api.get_user(created_user.id) 
            
            self.assertIsNotNone(retreived_user)
            self.assertIsNotNone(retreived_user.id)
            self.assertEqual(retreived_user.id, created_user.id)
        except Exception as ex:
            self.fail(ex)
        finally:
            self.api.deactivate_user(created_user.id)
            self.api.delete_user(created_user.id)

        pass

    def test_list_users(self) -> None:
        """Test case for list_users

        List a Users
        """
        try:
            create_user_request = CreateUserRequest(
                type=UserType(
                    type='test_user_type', 
                    displayName='test_user_type_display_name', 
                    name='test_user_type_name'
                ),
                profile=UserProfile(
                    userType='test_user_type_profile_type', 
                    firstName='John', 
                    lastName='test_list_users',
                    email='test_list_users-python@example.com',
                    login='test_list_users-python@example.com',
                    nickName='test_list_users'
                )
            )
            
            created_user = self.api.create_user(create_user_request)
            
            time.sleep(3)
            
            found_users = self.api.list_users(search='profile.nickName eq "' + created_user.profile.nick_name + '"')
            
            self.assertEqual(1, len(found_users))
        except Exception as ex:
            self.fail(ex)
        finally:
            self.api.deactivate_user(created_user.id)
            self.api.delete_user(created_user.id)
        
        pass


if __name__ == '__main__':
    unittest.main()
