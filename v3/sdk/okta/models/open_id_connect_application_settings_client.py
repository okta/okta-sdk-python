# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from okta.models.o_auth_grant_type import OAuthGrantType
from okta.models.o_auth_response_type import OAuthResponseType
from okta.models.open_id_connect_application_consent_method import OpenIdConnectApplicationConsentMethod
from okta.models.open_id_connect_application_idp_initiated_login import OpenIdConnectApplicationIdpInitiatedLogin
from okta.models.open_id_connect_application_issuer_mode import OpenIdConnectApplicationIssuerMode
from okta.models.open_id_connect_application_settings_client_keys import OpenIdConnectApplicationSettingsClientKeys
from okta.models.open_id_connect_application_settings_refresh_token import OpenIdConnectApplicationSettingsRefreshToken
from okta.models.open_id_connect_application_type import OpenIdConnectApplicationType
from typing import Optional, Set
from typing_extensions import Self

class OpenIdConnectApplicationSettingsClient(BaseModel):
    """
    OpenIdConnectApplicationSettingsClient
    """ # noqa: E501
    application_type: Optional[OpenIdConnectApplicationType] = None
    client_uri: Optional[StrictStr] = None
    consent_method: Optional[OpenIdConnectApplicationConsentMethod] = None
    dpop_bound_access_tokens: Optional[StrictBool] = Field(default=False, description="Indicates that the client application uses Demonstrating Proof-of-Possession (DPoP) for token requests. If `true`, the authorization server rejects token requests from this client that don't contain the DPoP header.")
    frontchannel_logout_session_required: Optional[StrictBool] = Field(default=None, description="Include user session details.")
    frontchannel_logout_uri: Optional[StrictStr] = Field(default=None, description="URL where Okta sends the logout request.")
    grant_types: Optional[List[OAuthGrantType]] = None
    idp_initiated_login: Optional[OpenIdConnectApplicationIdpInitiatedLogin] = None
    initiate_login_uri: Optional[StrictStr] = None
    issuer_mode: Optional[OpenIdConnectApplicationIssuerMode] = None
    jwks: Optional[OpenIdConnectApplicationSettingsClientKeys] = None
    jwks_uri: Optional[StrictStr] = Field(default=None, description="URL string that references a JSON Web Key Set for validating JWTs presented to Okta.")
    logo_uri: Optional[StrictStr] = None
    participate_slo: Optional[StrictBool] = Field(default=None, description="Allows the app to participate in front-channel single logout.")
    policy_uri: Optional[StrictStr] = None
    post_logout_redirect_uris: Optional[List[StrictStr]] = None
    redirect_uris: Optional[List[StrictStr]] = None
    refresh_token: Optional[OpenIdConnectApplicationSettingsRefreshToken] = None
    response_types: Optional[List[OAuthResponseType]] = None
    tos_uri: Optional[StrictStr] = None
    wildcard_redirect: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["application_type", "client_uri", "consent_method", "dpop_bound_access_tokens", "frontchannel_logout_session_required", "frontchannel_logout_uri", "grant_types", "idp_initiated_login", "initiate_login_uri", "issuer_mode", "jwks", "jwks_uri", "logo_uri", "participate_slo", "policy_uri", "post_logout_redirect_uris", "redirect_uris", "refresh_token", "response_types", "tos_uri", "wildcard_redirect"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenIdConnectApplicationSettingsClient from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of idp_initiated_login
        if self.idp_initiated_login:
            _dict['idp_initiated_login'] = self.idp_initiated_login.to_dict()
        # override the default output from pydantic by calling `to_dict()` of jwks
        if self.jwks:
            _dict['jwks'] = self.jwks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refresh_token
        if self.refresh_token:
            _dict['refresh_token'] = self.refresh_token.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenIdConnectApplicationSettingsClient from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "application_type": obj.get("application_type"),
            "client_uri": obj.get("client_uri"),
            "consent_method": obj.get("consent_method"),
            "dpop_bound_access_tokens": obj.get("dpop_bound_access_tokens") if obj.get("dpop_bound_access_tokens") is not None else False,
            "frontchannel_logout_session_required": obj.get("frontchannel_logout_session_required"),
            "frontchannel_logout_uri": obj.get("frontchannel_logout_uri"),
            "grant_types": obj.get("grant_types"),
            "idp_initiated_login": OpenIdConnectApplicationIdpInitiatedLogin.from_dict(obj["idp_initiated_login"]) if obj.get("idp_initiated_login") is not None else None,
            "initiate_login_uri": obj.get("initiate_login_uri"),
            "issuer_mode": obj.get("issuer_mode"),
            "jwks": OpenIdConnectApplicationSettingsClientKeys.from_dict(obj["jwks"]) if obj.get("jwks") is not None else None,
            "jwks_uri": obj.get("jwks_uri"),
            "logo_uri": obj.get("logo_uri"),
            "participate_slo": obj.get("participate_slo"),
            "policy_uri": obj.get("policy_uri"),
            "post_logout_redirect_uris": obj.get("post_logout_redirect_uris"),
            "redirect_uris": obj.get("redirect_uris"),
            "refresh_token": OpenIdConnectApplicationSettingsRefreshToken.from_dict(obj["refresh_token"]) if obj.get("refresh_token") is not None else None,
            "response_types": obj.get("response_types"),
            "tos_uri": obj.get("tos_uri"),
            "wildcard_redirect": obj.get("wildcard_redirect")
        })
        return _obj


