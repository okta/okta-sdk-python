# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from openapi_client.models.email_template_touch_point_variant import EmailTemplateTouchPointVariant
from openapi_client.models.end_user_dashboard_touch_point_variant import EndUserDashboardTouchPointVariant
from openapi_client.models.error_page_touch_point_variant import ErrorPageTouchPointVariant
from openapi_client.models.links_self import LinksSelf
from openapi_client.models.loading_page_touch_point_variant import LoadingPageTouchPointVariant
from openapi_client.models.sign_in_page_touch_point_variant import SignInPageTouchPointVariant
from typing import Optional, Set
from typing_extensions import Self

class ThemeResponse(BaseModel):
    """
    ThemeResponse
    """ # noqa: E501
    background_image: Optional[StrictStr] = Field(None, alias="backgroundImage")
    email_template_touch_point_variant: Optional[EmailTemplateTouchPointVariant] = Field(None, alias="emailTemplateTouchPointVariant")
    end_user_dashboard_touch_point_variant: Optional[EndUserDashboardTouchPointVariant] = Field(None, alias="endUserDashboardTouchPointVariant")
    error_page_touch_point_variant: Optional[ErrorPageTouchPointVariant] = Field(None, alias="errorPageTouchPointVariant")
    favicon: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    loading_page_touch_point_variant: Optional[LoadingPageTouchPointVariant] = Field(None, alias="loadingPageTouchPointVariant")
    logo: Optional[StrictStr] = None
    primary_color_contrast_hex: Optional[StrictStr] = Field(None, alias="primaryColorContrastHex")
    primary_color_hex: Optional[StrictStr] = Field(None, alias="primaryColorHex")
    secondary_color_contrast_hex: Optional[StrictStr] = Field(None, alias="secondaryColorContrastHex")
    secondary_color_hex: Optional[StrictStr] = Field(None, alias="secondaryColorHex")
    sign_in_page_touch_point_variant: Optional[SignInPageTouchPointVariant] = Field(None, alias="signInPageTouchPointVariant")
    links: Optional[LinksSelf] = Field(None, alias="_links")
    __properties: ClassVar[List[str]] = ["backgroundImage", "emailTemplateTouchPointVariant", "endUserDashboardTouchPointVariant", "errorPageTouchPointVariant", "favicon", "id", "loadingPageTouchPointVariant", "logo", "primaryColorContrastHex", "primaryColorHex", "secondaryColorContrastHex", "secondaryColorHex", "signInPageTouchPointVariant", "_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ThemeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "background_image",
            "favicon",
            "id",
            "logo",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ThemeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundImage": obj.get("backgroundImage"),
            "emailTemplateTouchPointVariant": obj.get("emailTemplateTouchPointVariant"),
            "endUserDashboardTouchPointVariant": obj.get("endUserDashboardTouchPointVariant"),
            "errorPageTouchPointVariant": obj.get("errorPageTouchPointVariant"),
            "favicon": obj.get("favicon"),
            "id": obj.get("id"),
            "loadingPageTouchPointVariant": obj.get("loadingPageTouchPointVariant"),
            "logo": obj.get("logo"),
            "primaryColorContrastHex": obj.get("primaryColorContrastHex"),
            "primaryColorHex": obj.get("primaryColorHex"),
            "secondaryColorContrastHex": obj.get("secondaryColorContrastHex"),
            "secondaryColorHex": obj.get("secondaryColorHex"),
            "signInPageTouchPointVariant": obj.get("signInPageTouchPointVariant"),
            "_links": LinksSelf.from_dict(obj["_links"]) if obj.get("_links") is not None else None
        })
        return _obj


