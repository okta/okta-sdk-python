# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from openapi_client.models.behavior_rule import BehaviorRule
from openapi_client.models.behavior_rule_settings_anomalous_location import BehaviorRuleSettingsAnomalousLocation
from openapi_client.models.behavior_rule_type import BehaviorRuleType
from openapi_client.models.lifecycle_status import LifecycleStatus
from openapi_client.models.links_self import LinksSelf
from typing import Optional, Set
from typing_extensions import Self

class BehaviorRuleAnomalousLocation(BehaviorRule):
    """
    BehaviorRuleAnomalousLocation
    """ # noqa: E501
    settings: Optional[BehaviorRuleSettingsAnomalousLocation] = None
    __properties: ClassVar[List[str]] = ["created", "id", "lastUpdated", "name", "status", "type", "_link", "settings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BehaviorRuleAnomalousLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of link
        if self.link:
            _dict['_link'] = self.link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BehaviorRuleAnomalousLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "id": obj.get("id"),
            "lastUpdated": obj.get("lastUpdated"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "_link": LinksSelf.from_dict(obj["_link"]) if obj.get("_link") is not None else None,
            "settings": BehaviorRuleSettingsAnomalousLocation.from_dict(obj["settings"]) if obj.get("settings") is not None else None
        })
        return _obj


