# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from openapi_client.models.log_geographical_context import LogGeographicalContext
from openapi_client.models.log_user_agent import LogUserAgent
from typing import Optional, Set
from typing_extensions import Self

class LogClient(BaseModel):
    """
    LogClient
    """ # noqa: E501
    device: Optional[StrictStr] = None
    geographical_context: Optional[LogGeographicalContext] = Field(None, alias="geographicalContext")
    id: Optional[StrictStr] = None
    ip_address: Optional[StrictStr] = Field(None, alias="ipAddress")
    user_agent: Optional[LogUserAgent] = Field(None, alias="userAgent")
    zone: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["device", "geographicalContext", "id", "ipAddress", "userAgent", "zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogClient from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "device",
            "id",
            "ip_address",
            "zone",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geographical_context
        if self.geographical_context:
            _dict['geographicalContext'] = self.geographical_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_agent
        if self.user_agent:
            _dict['userAgent'] = self.user_agent.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogClient from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "device": obj.get("device"),
            "geographicalContext": LogGeographicalContext.from_dict(obj["geographicalContext"]) if obj.get("geographicalContext") is not None else None,
            "id": obj.get("id"),
            "ipAddress": obj.get("ipAddress"),
            "userAgent": LogUserAgent.from_dict(obj["userAgent"]) if obj.get("userAgent") is not None else None,
            "zone": obj.get("zone")
        })
        return _obj


