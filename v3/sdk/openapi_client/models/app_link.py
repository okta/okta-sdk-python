# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Optional, Set
from typing_extensions import Self

class AppLink(BaseModel):
    """
    AppLink
    """ # noqa: E501
    app_assignment_id: Optional[StrictStr] = Field(None, alias="appAssignmentId")
    app_instance_id: Optional[StrictStr] = Field(None, alias="appInstanceId")
    app_name: Optional[StrictStr] = Field(None, alias="appName")
    credentials_setup: Optional[StrictBool] = Field(None, alias="credentialsSetup")
    hidden: Optional[StrictBool] = None
    id: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    link_url: Optional[StrictStr] = Field(None, alias="linkUrl")
    logo_url: Optional[StrictStr] = Field(None, alias="logoUrl")
    sort_order: Optional[StrictInt] = Field(None, alias="sortOrder")
    __properties: ClassVar[List[str]] = ["appAssignmentId", "appInstanceId", "appName", "credentialsSetup", "hidden", "id", "label", "linkUrl", "logoUrl", "sortOrder"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "app_assignment_id",
            "app_instance_id",
            "app_name",
            "credentials_setup",
            "hidden",
            "id",
            "label",
            "link_url",
            "logo_url",
            "sort_order",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appAssignmentId": obj.get("appAssignmentId"),
            "appInstanceId": obj.get("appInstanceId"),
            "appName": obj.get("appName"),
            "credentialsSetup": obj.get("credentialsSetup"),
            "hidden": obj.get("hidden"),
            "id": obj.get("id"),
            "label": obj.get("label"),
            "linkUrl": obj.get("linkUrl"),
            "logoUrl": obj.get("logoUrl"),
            "sortOrder": obj.get("sortOrder")
        })
        return _obj


