# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from openapi_client.models.dns_record import DNSRecord
from openapi_client.models.domain_certificate_metadata import DomainCertificateMetadata
from openapi_client.models.domain_certificate_source_type import DomainCertificateSourceType
from openapi_client.models.domain_links import DomainLinks
from openapi_client.models.domain_validation_status import DomainValidationStatus
from typing import Optional, Set
from typing_extensions import Self

class DomainResponse(BaseModel):
    """
    The properties that define an individual domain.
    """ # noqa: E501
    brand_id: Optional[StrictStr] = Field(None, alias="brandId", description="The ID number of the brand")
    certificate_source_type: Optional[DomainCertificateSourceType] = Field(None, alias="certificateSourceType")
    dns_records: Optional[conlist(DNSRecord)] = Field(None, alias="dnsRecords")
    domain: Optional[StrictStr] = Field(None, description="Custom domain name")
    id: Optional[StrictStr] = Field(None, description="Unique ID of the domain")
    public_certificate: Optional[DomainCertificateMetadata] = Field(None, alias="publicCertificate")
    validation_status: Optional[DomainValidationStatus] = Field(None, alias="validationStatus")
    links: Optional[DomainLinks] = Field(None, alias="_links")
    __properties: ClassVar[List[str]] = ["brandId", "certificateSourceType", "dnsRecords", "domain", "id", "publicCertificate", "validationStatus", "_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dns_records (list)
        _items = []
        if self.dns_records:
            for _item in self.dns_records:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dnsRecords'] = _items
        # override the default output from pydantic by calling `to_dict()` of public_certificate
        if self.public_certificate:
            _dict['publicCertificate'] = self.public_certificate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brandId": obj.get("brandId"),
            "certificateSourceType": obj.get("certificateSourceType"),
            "dnsRecords": [DNSRecord.from_dict(_item) for _item in obj["dnsRecords"]] if obj.get("dnsRecords") is not None else None,
            "domain": obj.get("domain"),
            "id": obj.get("id"),
            "publicCertificate": DomainCertificateMetadata.from_dict(obj["publicCertificate"]) if obj.get("publicCertificate") is not None else None,
            "validationStatus": obj.get("validationStatus"),
            "_links": DomainLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None
        })
        return _obj


