# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from openapi_client.models.per_client_rate_limit_mode import PerClientRateLimitMode
from typing import Optional, Set
from typing_extensions import Self

class PerClientRateLimitSettingsUseCaseModeOverrides(BaseModel):
    """
    A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode. Overrides the `defaultMode` property for the specified use cases.
    """ # noqa: E501
    login_page: Optional[PerClientRateLimitMode] = Field(None, alias="LOGIN_PAGE")
    oauth2_authorize: Optional[PerClientRateLimitMode] = Field(None, alias="OAUTH2_AUTHORIZE")
    oie_app_intent: Optional[PerClientRateLimitMode] = Field(None, alias="OIE_APP_INTENT")
    __properties: ClassVar[List[str]] = ["LOGIN_PAGE", "OAUTH2_AUTHORIZE", "OIE_APP_INTENT"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PerClientRateLimitSettingsUseCaseModeOverrides from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PerClientRateLimitSettingsUseCaseModeOverrides from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "LOGIN_PAGE": obj.get("LOGIN_PAGE"),
            "OAUTH2_AUTHORIZE": obj.get("OAUTH2_AUTHORIZE"),
            "OIE_APP_INTENT": obj.get("OIE_APP_INTENT")
        })
        return _obj


