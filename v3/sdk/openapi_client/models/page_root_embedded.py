# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from openapi_client.models.customizable_page import CustomizablePage
from typing import Optional, Set
from typing_extensions import Self

class PageRootEmbedded(BaseModel):
    """
    PageRootEmbedded
    """ # noqa: E501
    default: Optional[CustomizablePage] = None
    customized: Optional[CustomizablePage] = None
    customized_url: Optional[StrictStr] = Field(None, alias="customizedUrl")
    preview: Optional[CustomizablePage] = None
    preview_url: Optional[StrictStr] = Field(None, alias="previewUrl")
    __properties: ClassVar[List[str]] = ["default", "customized", "customizedUrl", "preview", "previewUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PageRootEmbedded from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default
        if self.default:
            _dict['default'] = self.default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customized
        if self.customized:
            _dict['customized'] = self.customized.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preview
        if self.preview:
            _dict['preview'] = self.preview.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PageRootEmbedded from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "default": CustomizablePage.from_dict(obj["default"]) if obj.get("default") is not None else None,
            "customized": CustomizablePage.from_dict(obj["customized"]) if obj.get("customized") is not None else None,
            "customizedUrl": obj.get("customizedUrl"),
            "preview": CustomizablePage.from_dict(obj["preview"]) if obj.get("preview") is not None else None,
            "previewUrl": obj.get("previewUrl")
        })
        return _obj


