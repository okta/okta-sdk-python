# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from openapi_client.models.links_self import LinksSelf
from typing import Optional, Set
from typing_extensions import Self

class OrgSetting(BaseModel):
    """
    OrgSetting
    """ # noqa: E501
    address1: Optional[StrictStr] = None
    address2: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    company_name: Optional[StrictStr] = Field(None, alias="companyName")
    country: Optional[StrictStr] = None
    created: Optional[datetime] = None
    end_user_support_help_url: Optional[StrictStr] = Field(None, alias="endUserSupportHelpURL")
    expires_at: Optional[datetime] = Field(None, alias="expiresAt")
    id: Optional[StrictStr] = None
    last_updated: Optional[datetime] = Field(None, alias="lastUpdated")
    phone_number: Optional[StrictStr] = Field(None, alias="phoneNumber")
    postal_code: Optional[StrictStr] = Field(None, alias="postalCode")
    state: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    subdomain: Optional[StrictStr] = None
    support_phone_number: Optional[StrictStr] = Field(None, alias="supportPhoneNumber")
    website: Optional[StrictStr] = None
    links: Optional[LinksSelf] = Field(None, alias="_links")
    __properties: ClassVar[List[str]] = ["address1", "address2", "city", "companyName", "country", "created", "endUserSupportHelpURL", "expiresAt", "id", "lastUpdated", "phoneNumber", "postalCode", "state", "status", "subdomain", "supportPhoneNumber", "website", "_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrgSetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "expires_at",
            "id",
            "last_updated",
            "status",
            "subdomain",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrgSetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "companyName": obj.get("companyName"),
            "country": obj.get("country"),
            "created": obj.get("created"),
            "endUserSupportHelpURL": obj.get("endUserSupportHelpURL"),
            "expiresAt": obj.get("expiresAt"),
            "id": obj.get("id"),
            "lastUpdated": obj.get("lastUpdated"),
            "phoneNumber": obj.get("phoneNumber"),
            "postalCode": obj.get("postalCode"),
            "state": obj.get("state"),
            "status": obj.get("status"),
            "subdomain": obj.get("subdomain"),
            "supportPhoneNumber": obj.get("supportPhoneNumber"),
            "website": obj.get("website"),
            "_links": LinksSelf.from_dict(obj["_links"]) if obj.get("_links") is not None else None
        })
        return _obj


