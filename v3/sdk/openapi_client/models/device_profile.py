# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from openapi_client.models.device_platform import DevicePlatform
from openapi_client.models.disk_encryption_type_def import DiskEncryptionTypeDef
from typing import Optional, Set
from typing_extensions import Self

class DeviceProfile(BaseModel):
    """
    DeviceProfile
    """ # noqa: E501
    disk_encryption_type: Optional[DiskEncryptionTypeDef] = Field(None, alias="diskEncryptionType")
    display_name: constr(strict=True, max_length=255, min_length=1) = Field(..., alias="displayName", description="Display name of the device")
    imei: Optional[constr(strict=True, max_length=17, min_length=14)] = Field(None, description="International Mobile Equipment Identity (IMEI) of the device")
    integrity_jailbreak: Optional[StrictBool] = Field(None, alias="integrityJailbreak", description="Indicates if the device is jailbroken or rooted. Only applicable to `IOS` and `ANDROID` platforms")
    manufacturer: Optional[constr(strict=True, max_length=127)] = Field(None, description="Name of the manufacturer of the device")
    meid: Optional[constr(strict=True, max_length=14)] = Field(None, description="Mobile equipment identifier of the device")
    model: Optional[constr(strict=True, max_length=127)] = Field(None, description="Model of the device")
    os_version: Optional[constr(strict=True, max_length=127)] = Field(None, alias="osVersion", description="Version of the device OS")
    platform: DevicePlatform = Field(...)
    registered: StrictBool = Field(..., description="Indicates if the device is registered at Okta")
    secure_hardware_present: Optional[StrictBool] = Field(None, alias="secureHardwarePresent", description="Indicates if the device contains a secure hardware functionality")
    serial_number: Optional[constr(strict=True, max_length=127)] = Field(None, alias="serialNumber", description="Serial number of the device")
    sid: Optional[constr(strict=True, max_length=256)] = Field(None, description="Windows Security identifier of the device")
    tpm_public_key_hash: Optional[StrictStr] = Field(None, alias="tpmPublicKeyHash", description="Windows Trsted Platform Module hash value")
    udid: Optional[constr(strict=True, max_length=47)] = Field(None, description="macOS Unique Device identifier of the device")
    __properties: ClassVar[List[str]] = ["diskEncryptionType", "displayName", "imei", "integrityJailbreak", "manufacturer", "meid", "model", "osVersion", "platform", "registered", "secureHardwarePresent", "serialNumber", "sid", "tpmPublicKeyHash", "udid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "diskEncryptionType": obj.get("diskEncryptionType"),
            "displayName": obj.get("displayName"),
            "imei": obj.get("imei"),
            "integrityJailbreak": obj.get("integrityJailbreak"),
            "manufacturer": obj.get("manufacturer"),
            "meid": obj.get("meid"),
            "model": obj.get("model"),
            "osVersion": obj.get("osVersion"),
            "platform": obj.get("platform"),
            "registered": obj.get("registered"),
            "secureHardwarePresent": obj.get("secureHardwarePresent"),
            "serialNumber": obj.get("serialNumber"),
            "sid": obj.get("sid"),
            "tpmPublicKeyHash": obj.get("tpmPublicKeyHash"),
            "udid": obj.get("udid")
        })
        return _obj


