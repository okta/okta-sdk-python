# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from openapi_client.models.authenticator_method_type import AuthenticatorMethodType
from openapi_client.models.lifecycle_status import LifecycleStatus
from openapi_client.models.links_self_and_lifecycle import LinksSelfAndLifecycle
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.authenticator_method_with_verifiable_properties import AuthenticatorMethodWithVerifiableProperties
    from openapi_client.models.authenticator_method_with_verifiable_properties import AuthenticatorMethodWithVerifiableProperties
    from openapi_client.models.authenticator_method_simple import AuthenticatorMethodSimple
    from openapi_client.models.authenticator_method_with_verifiable_properties import AuthenticatorMethodWithVerifiableProperties
    from openapi_client.models.authenticator_method_otp import AuthenticatorMethodOtp
    from openapi_client.models.authenticator_method_simple import AuthenticatorMethodSimple
    from openapi_client.models.authenticator_method_push import AuthenticatorMethodPush
    from openapi_client.models.authenticator_method_simple import AuthenticatorMethodSimple
    from openapi_client.models.authenticator_method_signed_nonce import AuthenticatorMethodSignedNonce
    from openapi_client.models.authenticator_method_simple import AuthenticatorMethodSimple
    from openapi_client.models.authenticator_method_totp import AuthenticatorMethodTotp
    from openapi_client.models.authenticator_method_simple import AuthenticatorMethodSimple
    from openapi_client.models.authenticator_method_web_authn import AuthenticatorMethodWebAuthn

class AuthenticatorMethodBase(BaseModel):
    """
    AuthenticatorMethodBase
    """ # noqa: E501
    status: Optional[LifecycleStatus] = None
    type: Optional[AuthenticatorMethodType] = None
    links: Optional[LinksSelfAndLifecycle] = Field(None, alias="_links")
    __properties: ClassVar[List[str]] = ["status", "type", "_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'cert': 'AuthenticatorMethodWithVerifiableProperties','duo': 'AuthenticatorMethodWithVerifiableProperties','email': 'AuthenticatorMethodSimple','idp': 'AuthenticatorMethodWithVerifiableProperties','otp': 'AuthenticatorMethodOtp','password': 'AuthenticatorMethodSimple','push': 'AuthenticatorMethodPush','security_question': 'AuthenticatorMethodSimple','signed_nonce': 'AuthenticatorMethodSignedNonce','sms': 'AuthenticatorMethodSimple','totp': 'AuthenticatorMethodTotp','voice': 'AuthenticatorMethodSimple','webauthn': 'AuthenticatorMethodWebAuthn'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[AuthenticatorMethodWithVerifiableProperties, AuthenticatorMethodWithVerifiableProperties, AuthenticatorMethodSimple, AuthenticatorMethodWithVerifiableProperties, AuthenticatorMethodOtp, AuthenticatorMethodSimple, AuthenticatorMethodPush, AuthenticatorMethodSimple, AuthenticatorMethodSignedNonce, AuthenticatorMethodSimple, AuthenticatorMethodTotp, AuthenticatorMethodSimple, AuthenticatorMethodWebAuthn]]:
        """Create an instance of AuthenticatorMethodBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[AuthenticatorMethodWithVerifiableProperties, AuthenticatorMethodWithVerifiableProperties, AuthenticatorMethodSimple, AuthenticatorMethodWithVerifiableProperties, AuthenticatorMethodOtp, AuthenticatorMethodSimple, AuthenticatorMethodPush, AuthenticatorMethodSimple, AuthenticatorMethodSignedNonce, AuthenticatorMethodSimple, AuthenticatorMethodTotp, AuthenticatorMethodSimple, AuthenticatorMethodWebAuthn]]:
        """Create an instance of AuthenticatorMethodBase from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'cert':
            return import_module("openapi_client.models.authenticator_method_with_verifiable_properties").AuthenticatorMethodWithVerifiableProperties.from_dict(obj)
        if object_type ==  'duo':
            return import_module("openapi_client.models.authenticator_method_with_verifiable_properties").AuthenticatorMethodWithVerifiableProperties.from_dict(obj)
        if object_type ==  'email':
            return import_module("openapi_client.models.authenticator_method_simple").AuthenticatorMethodSimple.from_dict(obj)
        if object_type ==  'idp':
            return import_module("openapi_client.models.authenticator_method_with_verifiable_properties").AuthenticatorMethodWithVerifiableProperties.from_dict(obj)
        if object_type ==  'otp':
            return import_module("openapi_client.models.authenticator_method_otp").AuthenticatorMethodOtp.from_dict(obj)
        if object_type ==  'password':
            return import_module("openapi_client.models.authenticator_method_simple").AuthenticatorMethodSimple.from_dict(obj)
        if object_type ==  'push':
            return import_module("openapi_client.models.authenticator_method_push").AuthenticatorMethodPush.from_dict(obj)
        if object_type ==  'security_question':
            return import_module("openapi_client.models.authenticator_method_simple").AuthenticatorMethodSimple.from_dict(obj)
        if object_type ==  'signed_nonce':
            return import_module("openapi_client.models.authenticator_method_signed_nonce").AuthenticatorMethodSignedNonce.from_dict(obj)
        if object_type ==  'sms':
            return import_module("openapi_client.models.authenticator_method_simple").AuthenticatorMethodSimple.from_dict(obj)
        if object_type ==  'totp':
            return import_module("openapi_client.models.authenticator_method_totp").AuthenticatorMethodTotp.from_dict(obj)
        if object_type ==  'voice':
            return import_module("openapi_client.models.authenticator_method_simple").AuthenticatorMethodSimple.from_dict(obj)
        if object_type ==  'webauthn':
            return import_module("openapi_client.models.authenticator_method_web_authn").AuthenticatorMethodWebAuthn.from_dict(obj)

        raise ValueError("AuthenticatorMethodBase failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


