# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.lifecycle_status import LifecycleStatus
from openapi_client.models.policy_links import PolicyLinks
from openapi_client.models.policy_type import PolicyType
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.access_policy import AccessPolicy
    from openapi_client.models.idp_discovery_policy import IdpDiscoveryPolicy
    from openapi_client.models.multifactor_enrollment_policy import MultifactorEnrollmentPolicy
    from openapi_client.models.okta_sign_on_policy import OktaSignOnPolicy
    from openapi_client.models.password_policy import PasswordPolicy
    from openapi_client.models.profile_enrollment_policy import ProfileEnrollmentPolicy
    from openapi_client.models.authorization_server_policy import AuthorizationServerPolicy

class Policy(BaseModel):
    """
    Policy
    """ # noqa: E501
    created: Optional[datetime] = Field(default=None, description="Timestamp when the Policy was created")
    description: Optional[StrictStr] = Field(default=None, description="Policy description")
    id: Optional[StrictStr] = Field(default=None, description="Policy ID")
    last_updated: Optional[datetime] = Field(default=None, description="Timestamp when the Policy was last updated", alias="lastUpdated")
    name: Optional[StrictStr] = Field(default=None, description="Policy name")
    priority: Optional[StrictInt] = Field(default=None, description="Specifies the order in which this Policy is evaluated in relation to the other policies")
    status: Optional[LifecycleStatus] = None
    system: Optional[StrictBool] = Field(default=None, description="Specifies whether Okta created the Policy")
    type: Optional[PolicyType] = None
    embedded: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="_embedded")
    links: Optional[PolicyLinks] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = ["created", "description", "id", "lastUpdated", "name", "priority", "status", "system", "type", "_embedded", "_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ACCESS_POLICY': 'AccessPolicy','IDP_DISCOVERY': 'IdpDiscoveryPolicy','MFA_ENROLL': 'MultifactorEnrollmentPolicy','OKTA_SIGN_ON': 'OktaSignOnPolicy','PASSWORD': 'PasswordPolicy','PROFILE_ENROLLMENT': 'ProfileEnrollmentPolicy','AuthorizationServerPolicy': 'AuthorizationServerPolicy'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[AccessPolicy, IdpDiscoveryPolicy, MultifactorEnrollmentPolicy, OktaSignOnPolicy, PasswordPolicy, ProfileEnrollmentPolicy, AuthorizationServerPolicy]]:
        """Create an instance of Policy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "id",
            "last_updated",
            "embedded",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[AccessPolicy, IdpDiscoveryPolicy, MultifactorEnrollmentPolicy, OktaSignOnPolicy, PasswordPolicy, ProfileEnrollmentPolicy, AuthorizationServerPolicy]]:
        """Create an instance of Policy from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ACCESS_POLICY':
            return import_module("openapi_client.models.access_policy").AccessPolicy.from_dict(obj)
        if object_type ==  'IDP_DISCOVERY':
            return import_module("openapi_client.models.idp_discovery_policy").IdpDiscoveryPolicy.from_dict(obj)
        if object_type ==  'MFA_ENROLL':
            return import_module("openapi_client.models.multifactor_enrollment_policy").MultifactorEnrollmentPolicy.from_dict(obj)
        if object_type ==  'OKTA_SIGN_ON':
            return import_module("openapi_client.models.okta_sign_on_policy").OktaSignOnPolicy.from_dict(obj)
        if object_type ==  'PASSWORD':
            return import_module("openapi_client.models.password_policy").PasswordPolicy.from_dict(obj)
        if object_type ==  'PROFILE_ENROLLMENT':
            return import_module("openapi_client.models.profile_enrollment_policy").ProfileEnrollmentPolicy.from_dict(obj)
        if object_type ==  'AuthorizationServerPolicy':
            return import_module("openapi_client.models.authorization_server_policy").AuthorizationServerPolicy.from_dict(obj)

        raise ValueError("Policy failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


