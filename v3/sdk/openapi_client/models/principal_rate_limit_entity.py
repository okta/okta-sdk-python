# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from openapi_client.models.principal_type import PrincipalType
from typing import Optional, Set
from typing_extensions import Self

class PrincipalRateLimitEntity(BaseModel):
    """
    
    """ # noqa: E501
    created_by: Optional[StrictStr] = Field(None, alias="createdBy")
    created_date: Optional[datetime] = Field(None, alias="createdDate")
    default_concurrency_percentage: Optional[StrictInt] = Field(None, alias="defaultConcurrencyPercentage")
    default_percentage: Optional[StrictInt] = Field(None, alias="defaultPercentage")
    id: Optional[StrictStr] = None
    last_update: Optional[datetime] = Field(None, alias="lastUpdate")
    last_updated_by: Optional[StrictStr] = Field(None, alias="lastUpdatedBy")
    org_id: Optional[StrictStr] = Field(None, alias="orgId")
    principal_id: StrictStr = Field(..., alias="principalId")
    principal_type: PrincipalType = Field(..., alias="principalType")
    __properties: ClassVar[List[str]] = ["createdBy", "createdDate", "defaultConcurrencyPercentage", "defaultPercentage", "id", "lastUpdate", "lastUpdatedBy", "orgId", "principalId", "principalType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrincipalRateLimitEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_by",
            "created_date",
            "default_concurrency_percentage",
            "default_percentage",
            "id",
            "last_update",
            "last_updated_by",
            "org_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrincipalRateLimitEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdBy": obj.get("createdBy"),
            "createdDate": obj.get("createdDate"),
            "defaultConcurrencyPercentage": obj.get("defaultConcurrencyPercentage"),
            "defaultPercentage": obj.get("defaultPercentage"),
            "id": obj.get("id"),
            "lastUpdate": obj.get("lastUpdate"),
            "lastUpdatedBy": obj.get("lastUpdatedBy"),
            "orgId": obj.get("orgId"),
            "principalId": obj.get("principalId"),
            "principalType": obj.get("principalType")
        })
        return _obj


