# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.application_accessibility import ApplicationAccessibility
from openapi_client.models.application_licensing import ApplicationLicensing
from openapi_client.models.application_lifecycle_status import ApplicationLifecycleStatus
from openapi_client.models.application_links import ApplicationLinks
from openapi_client.models.application_sign_on_mode import ApplicationSignOnMode
from openapi_client.models.application_visibility import ApplicationVisibility
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.auto_login_application import AutoLoginApplication
    from openapi_client.models.basic_auth_application import BasicAuthApplication
    from openapi_client.models.bookmark_application import BookmarkApplication
    from openapi_client.models.browser_plugin_application import BrowserPluginApplication
    from openapi_client.models.open_id_connect_application import OpenIdConnectApplication
    from openapi_client.models.saml_application import SamlApplication
    from openapi_client.models.saml_application import SamlApplication
    from openapi_client.models.secure_password_store_application import SecurePasswordStoreApplication
    from openapi_client.models.ws_federation_application import WsFederationApplication

class Application(BaseModel):
    """
    Application
    """ # noqa: E501
    accessibility: Optional[ApplicationAccessibility] = None
    created: Optional[datetime] = None
    features: Optional[List[StrictStr]] = None
    id: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    last_updated: Optional[datetime] = Field(default=None, alias="lastUpdated")
    licensing: Optional[ApplicationLicensing] = None
    profile: Optional[Dict[str, Dict[str, Any]]] = None
    sign_on_mode: Optional[ApplicationSignOnMode] = Field(default=None, alias="signOnMode")
    status: Optional[ApplicationLifecycleStatus] = None
    visibility: Optional[ApplicationVisibility] = None
    embedded: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="_embedded")
    links: Optional[ApplicationLinks] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = ["accessibility", "created", "features", "id", "label", "lastUpdated", "licensing", "profile", "signOnMode", "status", "visibility", "_embedded", "_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'signOnMode'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'AUTO_LOGIN': 'AutoLoginApplication','BASIC_AUTH': 'BasicAuthApplication','BOOKMARK': 'BookmarkApplication','BROWSER_PLUGIN': 'BrowserPluginApplication','OPENID_CONNECT': 'OpenIdConnectApplication','SAML_1_1': 'SamlApplication','SAML_2_0': 'SamlApplication','SECURE_PASSWORD_STORE': 'SecurePasswordStoreApplication','WS_FEDERATION': 'WsFederationApplication'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[AutoLoginApplication, BasicAuthApplication, BookmarkApplication, BrowserPluginApplication, OpenIdConnectApplication, SamlApplication, SamlApplication, SecurePasswordStoreApplication, WsFederationApplication]]:
        """Create an instance of Application from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "id",
            "last_updated",
            "embedded",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accessibility
        if self.accessibility:
            _dict['accessibility'] = self.accessibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of licensing
        if self.licensing:
            _dict['licensing'] = self.licensing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of visibility
        if self.visibility:
            _dict['visibility'] = self.visibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[AutoLoginApplication, BasicAuthApplication, BookmarkApplication, BrowserPluginApplication, OpenIdConnectApplication, SamlApplication, SamlApplication, SecurePasswordStoreApplication, WsFederationApplication]]:
        """Create an instance of Application from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'AutoLoginApplication':
            return import_module("openapi_client.models.auto_login_application").AutoLoginApplication.from_dict(obj)
        if object_type ==  'BasicAuthApplication':
            return import_module("openapi_client.models.basic_auth_application").BasicAuthApplication.from_dict(obj)
        if object_type ==  'BookmarkApplication':
            return import_module("openapi_client.models.bookmark_application").BookmarkApplication.from_dict(obj)
        if object_type ==  'BrowserPluginApplication':
            return import_module("openapi_client.models.browser_plugin_application").BrowserPluginApplication.from_dict(obj)
        if object_type ==  'OpenIdConnectApplication':
            return import_module("openapi_client.models.open_id_connect_application").OpenIdConnectApplication.from_dict(obj)
        if object_type ==  'SamlApplication':
            return import_module("openapi_client.models.saml_application").SamlApplication.from_dict(obj)
        if object_type ==  'SamlApplication':
            return import_module("openapi_client.models.saml_application").SamlApplication.from_dict(obj)
        if object_type ==  'SecurePasswordStoreApplication':
            return import_module("openapi_client.models.secure_password_store_application").SecurePasswordStoreApplication.from_dict(obj)
        if object_type ==  'WsFederationApplication':
            return import_module("openapi_client.models.ws_federation_application").WsFederationApplication.from_dict(obj)

        raise ValueError("Application failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


