# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.href_object import HrefObject
from openapi_client.models.href_object_activate_link import HrefObjectActivateLink
from openapi_client.models.href_object_deactivate_link import HrefObjectDeactivateLink
from openapi_client.models.href_object_self_link import HrefObjectSelfLink
from openapi_client.models.href_object_suspend_link import HrefObjectSuspendLink
from openapi_client.models.href_object_unsuspend_link import HrefObjectUnsuspendLink
from typing import Optional, Set
from typing_extensions import Self

class LinksSelfAndFullUsersLifecycle(BaseModel):
    """
    LinksSelfAndFullUsersLifecycle
    """ # noqa: E501
    var_self: Optional[HrefObjectSelfLink] = Field(default=None, alias="self")
    activate: Optional[HrefObjectActivateLink] = None
    deactivate: Optional[HrefObjectDeactivateLink] = None
    suspend: Optional[HrefObjectSuspendLink] = None
    unsuspend: Optional[HrefObjectUnsuspendLink] = None
    users: Optional[HrefObject] = Field(default=None, description="Link to Device users")
    __properties: ClassVar[List[str]] = ["self", "activate", "deactivate", "suspend", "unsuspend", "users"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LinksSelfAndFullUsersLifecycle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activate
        if self.activate:
            _dict['activate'] = self.activate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deactivate
        if self.deactivate:
            _dict['deactivate'] = self.deactivate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suspend
        if self.suspend:
            _dict['suspend'] = self.suspend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unsuspend
        if self.unsuspend:
            _dict['unsuspend'] = self.unsuspend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of users
        if self.users:
            _dict['users'] = self.users.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LinksSelfAndFullUsersLifecycle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "self": HrefObjectSelfLink.from_dict(obj["self"]) if obj.get("self") is not None else None,
            "activate": HrefObjectActivateLink.from_dict(obj["activate"]) if obj.get("activate") is not None else None,
            "deactivate": HrefObjectDeactivateLink.from_dict(obj["deactivate"]) if obj.get("deactivate") is not None else None,
            "suspend": HrefObjectSuspendLink.from_dict(obj["suspend"]) if obj.get("suspend") is not None else None,
            "unsuspend": HrefObjectUnsuspendLink.from_dict(obj["unsuspend"]) if obj.get("unsuspend") is not None else None,
            "users": HrefObject.from_dict(obj["users"]) if obj.get("users") is not None else None
        })
        return _obj


