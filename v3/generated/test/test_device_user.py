# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.device_user import DeviceUser

class TestDeviceUser(unittest.TestCase):
    """DeviceUser unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeviceUser:
        """Test DeviceUser
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeviceUser`
        """
        model = DeviceUser()
        if include_optional:
            return DeviceUser(
                created = '',
                management_status = 'MANAGED',
                screen_lock_type = 'NONE',
                user = openapi_client.models.user.User(
                    activated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    credentials = openapi_client.models.user_credentials.UserCredentials(
                        password = openapi_client.models.password_credential.PasswordCredential(
                            hash = openapi_client.models.password_credential_hash.PasswordCredentialHash(
                                algorithm = 'BCRYPT', 
                                digest_algorithm = 'SHA256_HMAC', 
                                iteration_count = 56, 
                                key_size = 56, 
                                salt = '', 
                                salt_order = '', 
                                value = '', 
                                work_factor = 56, ), 
                            hook = openapi_client.models.password_credential_hook.PasswordCredentialHook(
                                type = '', ), 
                            value = '', ), 
                        provider = openapi_client.models.authentication_provider.AuthenticationProvider(
                            name = '', 
                            type = 'ACTIVE_DIRECTORY', ), 
                        recovery_question = openapi_client.models.recovery_question_credential.RecoveryQuestionCredential(
                            answer = '', 
                            question = '', ), ), 
                    id = '', 
                    last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    password_changed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    profile = { }, 
                    realm_id = 'guo1bfiNtSnZYILxO0g4', 
                    status = 'ACTIVE', 
                    status_changed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    transitioning_to_status = 'ACTIVE', 
                    type = openapi_client.models.user_type.UserType(
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_by = '', 
                        default = True, 
                        description = '', 
                        display_name = '', 
                        id = '', 
                        last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_updated_by = '', 
                        name = '', 
                        _links = null, ), 
                    _embedded = {
                        'key' : None
                        }, 
                    _links = openapi_client.models.links_self.LinksSelf(
                        self = null, ), )
            )
        else:
            return DeviceUser(
        )
        """

    def testDeviceUser(self):
        """Test DeviceUser"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
