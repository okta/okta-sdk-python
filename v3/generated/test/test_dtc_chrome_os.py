# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.dtc_chrome_os import DTCChromeOS

class TestDTCChromeOS(unittest.TestCase):
    """DTCChromeOS unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DTCChromeOS:
        """Test DTCChromeOS
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DTCChromeOS`
        """
        model = DTCChromeOS()
        if include_optional:
            return DTCChromeOS(
                allow_screen_lock = True,
                browser_version = openapi_client.models.chrome_browser_version.ChromeBrowserVersion(
                    minimum = '', ),
                built_in_dns_client_enabled = True,
                chrome_remote_desktop_app_blocked = True,
                device_enrollment_domain = '',
                disk_enrypted = True,
                key_trust_level = 'CHROME_OS_VERIFIED_MODE',
                os_firewall = True,
                os_version = openapi_client.models.os_version.OSVersion(
                    minimum = '', ),
                password_protection_warning_trigger = 'PHISHING_REUSE',
                realtime_url_check_mode = True,
                safe_browsing_protection_level = 'ENHANCED_PROTECTION',
                screen_lock_secured = True,
                site_isolation_enabled = True
            )
        else:
            return DTCChromeOS(
        )
        """

    def testDTCChromeOS(self):
        """Test DTCChromeOS"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
