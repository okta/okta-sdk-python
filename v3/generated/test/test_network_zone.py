# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.network_zone import NetworkZone

class TestNetworkZone(unittest.TestCase):
    """NetworkZone unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NetworkZone:
        """Test NetworkZone
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NetworkZone`
        """
        model = NetworkZone()
        if include_optional:
            return NetworkZone(
                asns = [
                    ''
                    ],
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                gateways = [
                    openapi_client.models.network_zone_address.NetworkZoneAddress(
                        type = 'CIDR', 
                        value = '', )
                    ],
                id = '',
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                locations = [
                    openapi_client.models.network_zone_location.NetworkZoneLocation(
                        country = 'US', 
                        region = 'US-CA', )
                    ],
                name = '',
                proxies = [
                    openapi_client.models.network_zone_address.NetworkZoneAddress(
                        type = 'CIDR', 
                        value = '', )
                    ],
                proxy_type = 'null',
                status = 'ACTIVE',
                system = True,
                type = 'DYNAMIC',
                usage = 'BLOCKLIST',
                links = None
            )
        else:
            return NetworkZone(
        )
        """

    def testNetworkZone(self):
        """Test NetworkZone"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
