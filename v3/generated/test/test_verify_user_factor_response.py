# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.verify_user_factor_response import VerifyUserFactorResponse

class TestVerifyUserFactorResponse(unittest.TestCase):
    """VerifyUserFactorResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VerifyUserFactorResponse:
        """Test VerifyUserFactorResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VerifyUserFactorResponse`
        """
        model = VerifyUserFactorResponse()
        if include_optional:
            return VerifyUserFactorResponse(
                expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                factor_result = 'CHALLENGE',
                factor_result_message = '',
                embedded = {
                    'key' : None
                    },
                links = openapi_client.models.verify_user_factor_response_links.VerifyUserFactorResponseLinks(
                    self = null, 
                    poll = openapi_client.models.link_object.Link Object(
                        hints = openapi_client.models.href_object_hints.HrefObject_hints(
                            allow = [
                                'DELETE'
                                ], ), 
                        href = '', 
                        name = '', 
                        type = '', ), 
                    cancel = openapi_client.models.link_object.Link Object(
                        href = '', 
                        name = '', 
                        type = '', ), )
            )
        else:
            return VerifyUserFactorResponse(
        )
        """

    def testVerifyUserFactorResponse(self):
        """Test VerifyUserFactorResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
