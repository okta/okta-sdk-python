# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.password_policy_settings import PasswordPolicySettings

class TestPasswordPolicySettings(unittest.TestCase):
    """PasswordPolicySettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PasswordPolicySettings:
        """Test PasswordPolicySettings
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PasswordPolicySettings`
        """
        model = PasswordPolicySettings()
        if include_optional:
            return PasswordPolicySettings(
                delegation = openapi_client.models.password_policy_delegation_settings.PasswordPolicyDelegationSettings(
                    options = openapi_client.models.password_policy_delegation_settings_options.PasswordPolicyDelegationSettingsOptions(
                        skip_unlock = True, ), ),
                password = openapi_client.models.password_policy_password_settings.PasswordPolicyPasswordSettings(
                    age = openapi_client.models.password_policy_password_settings_age.PasswordPolicyPasswordSettingsAge(
                        expire_warn_days = 56, 
                        history_count = 56, 
                        max_age_days = 56, 
                        min_age_minutes = 56, ), 
                    complexity = openapi_client.models.password_policy_password_settings_complexity.PasswordPolicyPasswordSettingsComplexity(
                        dictionary = openapi_client.models.password_dictionary.PasswordDictionary(
                            common = openapi_client.models.password_dictionary_common.PasswordDictionaryCommon(
                                exclude = True, ), ), 
                        exclude_attributes = [
                            ''
                            ], 
                        exclude_username = True, 
                        min_length = 56, 
                        min_lower_case = 56, 
                        min_number = 56, 
                        min_symbol = 56, 
                        min_upper_case = 56, ), 
                    lockout = openapi_client.models.password_policy_password_settings_lockout.PasswordPolicyPasswordSettingsLockout(
                        auto_unlock_minutes = 56, 
                        max_attempts = 56, 
                        show_lockout_failures = True, 
                        user_lockout_notification_channels = [
                            ''
                            ], ), ),
                recovery = openapi_client.models.password_policy_recovery_settings.PasswordPolicyRecoverySettings(
                    factors = openapi_client.models.password_policy_recovery_factors.PasswordPolicyRecoveryFactors(
                        okta_call = openapi_client.models.password_policy_recovery_factor_settings.PasswordPolicyRecoveryFactorSettings(
                            status = 'ACTIVE', ), 
                        okta_email = openapi_client.models.password_policy_recovery_email.PasswordPolicyRecoveryEmail(
                            properties = openapi_client.models.password_policy_recovery_email_properties.PasswordPolicyRecoveryEmailProperties(
                                recovery_token = openapi_client.models.password_policy_recovery_email_recovery_token.PasswordPolicyRecoveryEmailRecoveryToken(
                                    token_lifetime_minutes = 56, ), ), ), 
                        okta_sms = openapi_client.models.password_policy_recovery_factor_settings.PasswordPolicyRecoveryFactorSettings(), 
                        recovery_question = openapi_client.models.password_policy_recovery_question.PasswordPolicyRecoveryQuestion(), ), )
            )
        else:
            return PasswordPolicySettings(
        )
        """

    def testPasswordPolicySettings(self):
        """Test PasswordPolicySettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
