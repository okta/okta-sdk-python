# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.protocol import Protocol

class TestProtocol(unittest.TestCase):
    """Protocol unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Protocol:
        """Test Protocol
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Protocol`
        """
        model = Protocol()
        if include_optional:
            return Protocol(
                algorithms = openapi_client.models.protocol_algorithms.ProtocolAlgorithms(
                    request = openapi_client.models.protocol_algorithm_type.ProtocolAlgorithmType(
                        signature = openapi_client.models.protocol_algorithm_type_signature.ProtocolAlgorithmTypeSignature(
                            algorithm = '', 
                            scope = 'ANY', ), ), 
                    response = openapi_client.models.protocol_algorithm_type.ProtocolAlgorithmType(), ),
                credentials = openapi_client.models.identity_provider_credentials.IdentityProviderCredentials(
                    client = openapi_client.models.identity_provider_credentials_client.IdentityProviderCredentialsClient(
                        client_id = '', 
                        client_secret = '', ), 
                    signing = openapi_client.models.identity_provider_credentials_signing.IdentityProviderCredentialsSigning(
                        kid = '', ), 
                    trust = openapi_client.models.identity_provider_credentials_trust.IdentityProviderCredentialsTrust(
                        audience = '', 
                        issuer = '', 
                        kid = '', 
                        revocation = 'CRL', 
                        revocation_cache_lifetime = 56, ), ),
                endpoints = openapi_client.models.protocol_endpoints.ProtocolEndpoints(
                    acs = openapi_client.models.protocol_endpoint.ProtocolEndpoint(
                        binding = 'HTTP-POST', 
                        destination = '', 
                        type = 'INSTANCE', 
                        url = '', ), 
                    authorization = openapi_client.models.protocol_endpoint.ProtocolEndpoint(
                        destination = '', 
                        url = '', ), 
                    jwks = , 
                    metadata = , 
                    slo = , 
                    sso = , 
                    token = , 
                    user_info = , ),
                issuer = openapi_client.models.protocol_endpoint.ProtocolEndpoint(
                    binding = 'HTTP-POST', 
                    destination = '', 
                    type = 'INSTANCE', 
                    url = '', ),
                relay_state = openapi_client.models.protocol_relay_state.ProtocolRelayState(
                    format = 'FROM_URL', ),
                scopes = [
                    ''
                    ],
                settings = openapi_client.models.protocol_settings.ProtocolSettings(
                    name_format = '', ),
                type = 'MTLS'
            )
        else:
            return Protocol(
        )
        """

    def testProtocol(self):
        """Test Protocol"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
