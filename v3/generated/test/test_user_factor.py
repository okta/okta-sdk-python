# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.user_factor import UserFactor

class TestUserFactor(unittest.TestCase):
    """UserFactor unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UserFactor:
        """Test UserFactor
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UserFactor`
        """
        model = UserFactor()
        if include_optional:
            return UserFactor(
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                factor_type = 'call',
                id = '',
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                profile = openapi_client.models.profile.profile(),
                provider = 'CUSTOM',
                status = 'ACTIVE',
                verify = openapi_client.models.verify_factor_request.VerifyFactorRequest(
                    activation_token = '', 
                    answer = '', 
                    attestation = '', 
                    client_data = '', 
                    next_pass_code = '', 
                    pass_code = '', 
                    registration_data = '', 
                    state_token = '', 
                    authenticator_data = '', 
                    signature_data = '', ),
                embedded = {
                    'key' : None
                    },
                links = openapi_client.models.links_self.LinksSelf(
                    self = null, )
            )
        else:
            return UserFactor(
        )
        """

    def testUserFactor(self):
        """Test UserFactor"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
