# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.provisioning import Provisioning

class TestProvisioning(unittest.TestCase):
    """Provisioning unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Provisioning:
        """Test Provisioning
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Provisioning`
        """
        model = Provisioning()
        if include_optional:
            return Provisioning(
                action = 'AUTO',
                conditions = openapi_client.models.provisioning_conditions.ProvisioningConditions(
                    deprovisioned = openapi_client.models.provisioning_deprovisioned_condition.ProvisioningDeprovisionedCondition(
                        action = 'NONE', ), 
                    suspended = openapi_client.models.provisioning_suspended_condition.ProvisioningSuspendedCondition(), ),
                groups = openapi_client.models.provisioning_groups.ProvisioningGroups(
                    action = 'APPEND', 
                    assignments = [
                        ''
                        ], 
                    filter = [
                        ''
                        ], 
                    source_attribute_name = '', ),
                profile_master = True
            )
        else:
            return Provisioning(
        )
        """

    def testProvisioning(self):
        """Test Provisioning"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
