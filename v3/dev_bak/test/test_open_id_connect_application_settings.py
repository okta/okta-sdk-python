# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.open_id_connect_application_settings import OpenIdConnectApplicationSettings

class TestOpenIdConnectApplicationSettings(unittest.TestCase):
    """OpenIdConnectApplicationSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OpenIdConnectApplicationSettings:
        """Test OpenIdConnectApplicationSettings
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OpenIdConnectApplicationSettings`
        """
        model = OpenIdConnectApplicationSettings()
        if include_optional:
            return OpenIdConnectApplicationSettings(
                identity_store_id = '',
                implicit_assignment = True,
                inline_hook_id = '',
                notes = openapi_client.models.application_settings_notes.ApplicationSettingsNotes(
                    admin = '', 
                    enduser = '', ),
                notifications = openapi_client.models.application_settings_notifications.ApplicationSettingsNotifications(
                    vpn = openapi_client.models.application_settings_notifications_vpn.ApplicationSettingsNotificationsVpn(
                        help_url = '', 
                        message = '', 
                        network = openapi_client.models.application_settings_notifications_vpn_network.ApplicationSettingsNotificationsVpnNetwork(
                            connection = '', 
                            exclude = [
                                ''
                                ], 
                            include = [
                                ''
                                ], ), ), ),
                oauth_client = openapi_client.models.open_id_connect_application_settings_client.OpenIdConnectApplicationSettingsClient(
                    application_type = 'browser', 
                    client_uri = '', 
                    consent_method = 'REQUIRED', 
                    dpop_bound_access_tokens = True, 
                    frontchannel_logout_session_required = True, 
                    frontchannel_logout_uri = '', 
                    grant_types = [
                        'authorization_code'
                        ], 
                    idp_initiated_login = openapi_client.models.open_id_connect_application_idp_initiated_login.OpenIdConnectApplicationIdpInitiatedLogin(
                        default_scope = [
                            ''
                            ], 
                        mode = '', ), 
                    initiate_login_uri = '', 
                    issuer_mode = 'CUSTOM_URL', 
                    jwks = openapi_client.models.open_id_connect_application_settings_client_keys.OpenIdConnectApplicationSettingsClientKeys(
                        keys = [
                            openapi_client.models.json_web_key.JsonWebKey(
                                alg = '', 
                                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                e = '', 
                                expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                key_ops = [
                                    ''
                                    ], 
                                kid = '', 
                                kty = '', 
                                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                n = '', 
                                status = '', 
                                use = '', 
                                x5c = [
                                    ''
                                    ], 
                                x5t = '', 
                                x5t#s256 = '', 
                                x5u = '', 
                                _links = openapi_client.models.links_self.LinksSelf(
                                    self = null, ), )
                            ], ), 
                    jwks_uri = '', 
                    logo_uri = '', 
                    participate_slo = True, 
                    policy_uri = '', 
                    post_logout_redirect_uris = [
                        ''
                        ], 
                    redirect_uris = [
                        ''
                        ], 
                    refresh_token = openapi_client.models.open_id_connect_application_settings_refresh_token.OpenIdConnectApplicationSettingsRefreshToken(
                        leeway = 56, 
                        rotation_type = 'ROTATE', ), 
                    response_types = [
                        'code'
                        ], 
                    tos_uri = '', 
                    wildcard_redirect = '', )
            )
        else:
            return OpenIdConnectApplicationSettings(
        )
        """

    def testOpenIdConnectApplicationSettings(self):
        """Test OpenIdConnectApplicationSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
