# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing_extensions import Self

from okta.models.user_schema_attribute_enum import UserSchemaAttributeEnum
from okta.models.user_schema_attribute_items import UserSchemaAttributeItems
from okta.models.user_schema_attribute_master import UserSchemaAttributeMaster
from okta.models.user_schema_attribute_permission import UserSchemaAttributePermission
from okta.models.user_schema_attribute_scope import UserSchemaAttributeScope
from okta.models.user_schema_attribute_type import UserSchemaAttributeType
from okta.models.user_schema_attribute_union import UserSchemaAttributeUnion


class GroupSchemaAttribute(BaseModel):
    """
    GroupSchemaAttribute
    """  # noqa: E501

    description: Optional[StrictStr] = None
    enum: Optional[List[StrictStr]] = None
    external_name: Optional[StrictStr] = Field(default=None, alias="externalName")
    external_namespace: Optional[StrictStr] = Field(
        default=None, alias="externalNamespace"
    )
    items: Optional[UserSchemaAttributeItems] = None
    master: Optional[UserSchemaAttributeMaster] = None
    max_length: Optional[StrictInt] = Field(default=None, alias="maxLength")
    min_length: Optional[StrictInt] = Field(default=None, alias="minLength")
    mutability: Optional[StrictStr] = None
    one_of: Optional[List[UserSchemaAttributeEnum]] = Field(default=None, alias="oneOf")
    permissions: Optional[List[UserSchemaAttributePermission]] = None
    required: Optional[StrictBool] = None
    scope: Optional[UserSchemaAttributeScope] = None
    title: Optional[StrictStr] = None
    type: Optional[UserSchemaAttributeType] = None
    union: Optional[UserSchemaAttributeUnion] = None
    unique: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "description",
        "enum",
        "externalName",
        "externalNamespace",
        "items",
        "master",
        "maxLength",
        "minLength",
        "mutability",
        "oneOf",
        "permissions",
        "required",
        "scope",
        "title",
        "type",
        "union",
        "unique",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroupSchemaAttribute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of items
        if self.items:
            if not isinstance(self.items, dict):
                _dict["items"] = self.items.to_dict()
            else:
                _dict["items"] = self.items

        # override the default output from pydantic by calling `to_dict()` of master
        if self.master:
            if not isinstance(self.master, dict):
                _dict["master"] = self.master.to_dict()
            else:
                _dict["master"] = self.master

        # override the default output from pydantic by calling `to_dict()` of each item in one_of (list)
        _items = []
        if self.one_of:
            for _item in self.one_of:
                if _item:
                    _items.append(_item.to_dict())
            _dict["oneOf"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item in self.permissions:
                if _item:
                    _items.append(_item.to_dict())
            _dict["permissions"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroupSchemaAttribute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "description": obj.get("description"),
                "enum": obj.get("enum"),
                "externalName": obj.get("externalName"),
                "externalNamespace": obj.get("externalNamespace"),
                "items": (
                    UserSchemaAttributeItems.from_dict(obj["items"])
                    if obj.get("items") is not None
                    else None
                ),
                "master": (
                    UserSchemaAttributeMaster.from_dict(obj["master"])
                    if obj.get("master") is not None
                    else None
                ),
                "maxLength": obj.get("maxLength"),
                "minLength": obj.get("minLength"),
                "mutability": obj.get("mutability"),
                "oneOf": (
                    [UserSchemaAttributeEnum.from_dict(_item) for _item in obj["oneOf"]]
                    if obj.get("oneOf") is not None
                    else None
                ),
                "permissions": (
                    [
                        UserSchemaAttributePermission.from_dict(_item)
                        for _item in obj["permissions"]
                    ]
                    if obj.get("permissions") is not None
                    else None
                ),
                "required": obj.get("required"),
                "scope": obj.get("scope"),
                "title": obj.get("title"),
                "type": obj.get("type"),
                "union": obj.get("union"),
                "unique": obj.get("unique"),
            }
        )
        return _obj
