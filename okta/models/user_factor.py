# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from importlib import import_module
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing import TYPE_CHECKING

from pydantic import BaseModel, ConfigDict, Field, StrictStr

from okta.models.factor_provider import FactorProvider
from okta.models.factor_status import FactorStatus
from okta.models.factor_type import FactorType
from okta.models.links_self import LinksSelf
from okta.models.verify_factor_request import VerifyFactorRequest

if TYPE_CHECKING:
    from okta.models.call_user_factor import CallUserFactor
    from okta.models.email_user_factor import EmailUserFactor
    from okta.models.custom_hotp_user_factor import CustomHotpUserFactor
    from okta.models.push_user_factor import PushUserFactor
    from okta.models.security_question_user_factor import SecurityQuestionUserFactor
    from okta.models.sms_user_factor import SmsUserFactor
    from okta.models.token_user_factor import TokenUserFactor
    from okta.models.hardware_user_factor import HardwareUserFactor
    from okta.models.custom_hotp_user_factor import CustomHotpUserFactor   # noqa: F811
    from okta.models.totp_user_factor import TotpUserFactor
    from okta.models.u2f_user_factor import U2fUserFactor
    from okta.models.web_user_factor import WebUserFactor
    from okta.models.web_authn_user_factor import WebAuthnUserFactor


class UserFactor(BaseModel):
    """
    UserFactor
    """  # noqa: E501

    created: Optional[datetime] = None
    factor_type: Optional[FactorType] = Field(default=None, alias="factorType")
    id: Optional[StrictStr] = None
    last_updated: Optional[datetime] = Field(default=None, alias="lastUpdated")
    profile: Optional[Dict[str, Any]] = Field(
        default=None, description="Factor-specific attributes"
    )
    provider: Optional[FactorProvider] = None
    status: Optional[FactorStatus] = None
    verify: Optional[VerifyFactorRequest] = None
    embedded: Optional[Dict[str, Dict[str, Any]]] = Field(
        default=None, alias="_embedded"
    )
    links: Optional[LinksSelf] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = [
        "created",
        "factorType",
        "id",
        "lastUpdated",
        "profile",
        "provider",
        "status",
        "verify",
        "_embedded",
        "_links",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = "factorType"

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        "call": "CallUserFactor",
        "email": "EmailUserFactor",
        "hotp": "CustomHotpUserFactor",
        "push": "PushUserFactor",
        "question": "SecurityQuestionUserFactor",
        "sms": "SmsUserFactor",
        "token": "TokenUserFactor",
        "token:hardware": "HardwareUserFactor",
        "token:hotp": "CustomHotpUserFactor",
        "token:software:totp": "TotpUserFactor",
        "u2f": "U2fUserFactor",
        "web": "WebUserFactor",
        "webauthn": "WebAuthnUserFactor",
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[
        Union[
            CallUserFactor,
            EmailUserFactor,
            CustomHotpUserFactor,
            PushUserFactor,
            SecurityQuestionUserFactor,
            SmsUserFactor,
            TokenUserFactor,
            HardwareUserFactor,
            CustomHotpUserFactor,
            TotpUserFactor,
            U2fUserFactor,
            WebUserFactor,
            WebAuthnUserFactor,
        ]
    ]:
        """Create an instance of UserFactor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "created",
                "id",
                "last_updated",
                "embedded",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of verify
        if self.verify:
            if not isinstance(self.verify, dict):
                _dict["verify"] = self.verify.to_dict()
            else:
                _dict["verify"] = self.verify

        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            if not isinstance(self.links, dict):
                _dict["_links"] = self.links.to_dict()
            else:
                _dict["_links"] = self.links

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[
        Union[
            CallUserFactor,
            EmailUserFactor,
            CustomHotpUserFactor,
            PushUserFactor,
            SecurityQuestionUserFactor,
            SmsUserFactor,
            TokenUserFactor,
            HardwareUserFactor,
            CustomHotpUserFactor,
            TotpUserFactor,
            U2fUserFactor,
            WebUserFactor,
            WebAuthnUserFactor,
        ]
    ]:
        """Create an instance of UserFactor from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type == "CallUserFactor":
            return import_module(
                "okta.models.call_user_factor"
            ).CallUserFactor.from_dict(obj)
        if object_type == "EmailUserFactor":
            return import_module(
                "okta.models.email_user_factor"
            ).EmailUserFactor.from_dict(obj)
        if object_type == "CustomHotpUserFactor":
            return import_module(
                "okta.models.custom_hotp_user_factor"
            ).CustomHotpUserFactor.from_dict(obj)
        if object_type == "PushUserFactor":
            return import_module(
                "okta.models.push_user_factor"
            ).PushUserFactor.from_dict(obj)
        if object_type == "SecurityQuestionUserFactor":
            return import_module(
                "okta.models.security_question_user_factor"
            ).SecurityQuestionUserFactor.from_dict(obj)
        if object_type == "SmsUserFactor":
            return import_module("okta.models.sms_user_factor").SmsUserFactor.from_dict(
                obj
            )
        if object_type == "TokenUserFactor":
            return import_module(
                "okta.models.token_user_factor"
            ).TokenUserFactor.from_dict(obj)
        if object_type == "HardwareUserFactor":
            return import_module(
                "okta.models.hardware_user_factor"
            ).HardwareUserFactor.from_dict(obj)
        if object_type == "CustomHotpUserFactor":
            return import_module(
                "okta.models.custom_hotp_user_factor"
            ).CustomHotpUserFactor.from_dict(obj)
        if object_type == "TotpUserFactor":
            return import_module(
                "okta.models.totp_user_factor"
            ).TotpUserFactor.from_dict(obj)
        if object_type == "U2fUserFactor":
            return import_module("okta.models.u2f_user_factor").U2fUserFactor.from_dict(
                obj
            )
        if object_type == "WebUserFactor":
            return import_module("okta.models.web_user_factor").WebUserFactor.from_dict(
                obj
            )
        if object_type == "WebAuthnUserFactor":
            return import_module(
                "okta.models.web_authn_user_factor"
            ).WebAuthnUserFactor.from_dict(obj)

        raise ValueError(
            "UserFactor failed to lookup discriminator value from "
            + json.dumps(obj)
            + ". Discriminator property name: "
            + cls.__discriminator_property_name
            + ", mapping: "
            + json.dumps(cls.__discriminator_value_class_map)
        )
