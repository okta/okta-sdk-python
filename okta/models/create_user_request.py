# coding: utf-8

"""
    Okta Admin Management

    Allows customers to easily access the Okta Management APIs

    The version of the OpenAPI document: 5.1.0
    Contact: devex-public@okta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from okta.models.user_credentials import UserCredentials
from okta.models.user_profile import UserProfile
from okta.models.user_type import UserType
from okta.okta_collection import OktaCollection
from typing import Optional, Set
from typing_extensions import Self

class CreateUserRequest(BaseModel):
    """
    CreateUserRequest
    """ # noqa: E501
    credentials: Optional[UserCredentials] = None
    group_ids: Optional[List[StrictStr]] = Field(default=None, alias="groupIds")
    profile: UserProfile
    realm_id: Optional[StrictStr] = Field(default=None, description="The ID of the realm in which the user is residing", alias="realmId")
    type: Optional[UserType] = None
    __properties: ClassVar[List[str]] = ["credentials", "groupIds", "profile", "realmId", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def __init__(self, config=None):
        if config:
            if "credentials" in config:
                if isinstance(config["credentials"],
                              UserCredentials):
                    object.__setattr__(self, "credentials", config["credentials"])
                elif config["credentials"] is not None:
                    object.__setattr__(self, "credentials", UserCredentials(config["credentials"]))
                else:
                    object.__setattr__(self, "credentials", None)
            else:
                object.__setattr__(self, "credentials", None)
            group_ids = OktaCollection.form_list(
                config["groupIds"] if "groupIds"\
                    in config else [],
                str
            )
            object.__setattr__(self, "group_ids", group_ids)
            if "profile" in config:
                if isinstance(config["profile"],
                              UserProfile):
                    object.__setattr__(self, "profile", config["profile"])
                elif config["profile"] is not None:
                    object.__setattr__(self, "profile", UserProfile(config["profile"]))
                else:
                    object.__setattr__(self, "profile", None)
            else:
                object.__setattr__(self, "profile", None)
            if "type" in config:
                if isinstance(config["type"],
                              UserType):
                    object.__setattr__(self, "type", config["type"])
                elif config["type"] is not None:
                    object.__setattr__(self, "type", UserType(config["type"]))
                else:
                    object.__setattr__(self, "type", None)
            else:
                object.__setattr__(self, "type", None)
        else:
            object.__setattr__(self, "credentials", None)
            object.__setattr__(self, "group_ids", [])
            object.__setattr__(self, "profile", None)
            object.__setattr__(self, "type", None)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateUserRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of credentials
        if self.credentials:
            _dict['credentials'] = self.credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateUserRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "credentials": UserCredentials.from_dict(obj["credentials"]) if obj.get("credentials") is not None else None,
            "groupIds": obj.get("groupIds"),
            "profile": UserProfile.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "realmId": obj.get("realmId"),
            "type": UserType.from_dict(obj["type"]) if obj.get("type") is not None else None
        })
        return _obj


