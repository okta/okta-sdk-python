# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from okta.models.grant_or_token_status import GrantOrTokenStatus
from okta.models.o_auth2_actor import OAuth2Actor
from okta.models.o_auth2_scope_consent_grant_embedded import (
    OAuth2ScopeConsentGrantEmbedded,
)
from okta.models.o_auth2_scope_consent_grant_links import OAuth2ScopeConsentGrantLinks
from okta.models.o_auth2_scope_consent_grant_source import OAuth2ScopeConsentGrantSource


class OAuth2ScopeConsentGrant(BaseModel):
    """
    Grant object that represents an app consent scope grant
    """  # noqa: E501

    client_id: Optional[StrictStr] = Field(
        default=None, description="Client ID of the app integration", alias="clientId"
    )
    created: Optional[datetime] = Field(
        default=None, description="Timestamp when the Grant object was created"
    )
    created_by: Optional[OAuth2Actor] = Field(default=None, alias="createdBy")
    id: Optional[StrictStr] = Field(default=None, description="ID of the Grant object")
    issuer: StrictStr = Field(
        description="The issuer of your org authorization server. This is typically your Okta domain."
    )
    last_updated: Optional[datetime] = Field(
        default=None,
        description="Timestamp when the Grant object was last updated",
        alias="lastUpdated",
    )
    scope_id: StrictStr = Field(
        description="The name of the [Okta scope](https://developer.okta.com/docs/api/oauth2/#oauth-20-scopes) for which "
                    "consent is granted",
        alias="scopeId",
    )
    source: Optional[OAuth2ScopeConsentGrantSource] = None
    status: Optional[GrantOrTokenStatus] = None
    user_id: Optional[StrictStr] = Field(
        default=None,
        description="User ID that granted consent (if `source` is `END_USER`)",
        alias="userId",
    )
    embedded: Optional[OAuth2ScopeConsentGrantEmbedded] = Field(
        default=None, alias="_embedded"
    )
    links: Optional[OAuth2ScopeConsentGrantLinks] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = [
        "clientId",
        "created",
        "createdBy",
        "id",
        "issuer",
        "lastUpdated",
        "scopeId",
        "source",
        "status",
        "userId",
        "_embedded",
        "_links",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OAuth2ScopeConsentGrant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "client_id",
                "created",
                "id",
                "last_updated",
                "user_id",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            if not isinstance(self.created_by, dict):
                _dict["createdBy"] = self.created_by.to_dict()
            else:
                _dict["createdBy"] = self.created_by

        # override the default output from pydantic by calling `to_dict()` of embedded
        if self.embedded:
            if not isinstance(self.embedded, dict):
                _dict["_embedded"] = self.embedded.to_dict()
            else:
                _dict["_embedded"] = self.embedded

        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            if not isinstance(self.links, dict):
                _dict["_links"] = self.links.to_dict()
            else:
                _dict["_links"] = self.links

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OAuth2ScopeConsentGrant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "clientId": obj.get("clientId"),
                "created": obj.get("created"),
                "createdBy": (
                    OAuth2Actor.from_dict(obj["createdBy"])
                    if obj.get("createdBy") is not None
                    else None
                ),
                "id": obj.get("id"),
                "issuer": obj.get("issuer"),
                "lastUpdated": obj.get("lastUpdated"),
                "scopeId": obj.get("scopeId"),
                "source": obj.get("source"),
                "status": obj.get("status"),
                "userId": obj.get("userId"),
                "_embedded": (
                    OAuth2ScopeConsentGrantEmbedded.from_dict(obj["_embedded"])
                    if obj.get("_embedded") is not None
                    else None
                ),
                "_links": (
                    OAuth2ScopeConsentGrantLinks.from_dict(obj["_links"])
                    if obj.get("_links") is not None
                    else None
                ),
            }
        )
        return _obj
