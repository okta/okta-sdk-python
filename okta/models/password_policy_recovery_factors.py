# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import BaseModel, ConfigDict
from typing_extensions import Self

from okta.models.password_policy_recovery_email import PasswordPolicyRecoveryEmail
from okta.models.password_policy_recovery_factor_settings import (
    PasswordPolicyRecoveryFactorSettings,
)
from okta.models.password_policy_recovery_question import PasswordPolicyRecoveryQuestion


class PasswordPolicyRecoveryFactors(BaseModel):
    """
    PasswordPolicyRecoveryFactors
    """  # noqa: E501

    okta_call: Optional[PasswordPolicyRecoveryFactorSettings] = None
    okta_email: Optional[PasswordPolicyRecoveryEmail] = None
    okta_sms: Optional[PasswordPolicyRecoveryFactorSettings] = None
    recovery_question: Optional[PasswordPolicyRecoveryQuestion] = None
    __properties: ClassVar[List[str]] = [
        "okta_call",
        "okta_email",
        "okta_sms",
        "recovery_question",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PasswordPolicyRecoveryFactors from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of okta_call
        if self.okta_call:
            if not isinstance(self.okta_call, dict):
                _dict["okta_call"] = self.okta_call.to_dict()
            else:
                _dict["okta_call"] = self.okta_call

        # override the default output from pydantic by calling `to_dict()` of okta_email
        if self.okta_email:
            if not isinstance(self.okta_email, dict):
                _dict["okta_email"] = self.okta_email.to_dict()
            else:
                _dict["okta_email"] = self.okta_email

        # override the default output from pydantic by calling `to_dict()` of okta_sms
        if self.okta_sms:
            if not isinstance(self.okta_sms, dict):
                _dict["okta_sms"] = self.okta_sms.to_dict()
            else:
                _dict["okta_sms"] = self.okta_sms

        # override the default output from pydantic by calling `to_dict()` of recovery_question
        if self.recovery_question:
            if not isinstance(self.recovery_question, dict):
                _dict["recovery_question"] = self.recovery_question.to_dict()
            else:
                _dict["recovery_question"] = self.recovery_question

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PasswordPolicyRecoveryFactors from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "okta_call": (
                    PasswordPolicyRecoveryFactorSettings.from_dict(obj["okta_call"])
                    if obj.get("okta_call") is not None
                    else None
                ),
                "okta_email": (
                    PasswordPolicyRecoveryEmail.from_dict(obj["okta_email"])
                    if obj.get("okta_email") is not None
                    else None
                ),
                "okta_sms": (
                    PasswordPolicyRecoveryFactorSettings.from_dict(obj["okta_sms"])
                    if obj.get("okta_sms") is not None
                    else None
                ),
                "recovery_question": (
                    PasswordPolicyRecoveryQuestion.from_dict(obj["recovery_question"])
                    if obj.get("recovery_question") is not None
                    else None
                ),
            }
        )
        return _obj
