# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self

from okta.models.policy_type import PolicyType
from okta.models.simulate_policy_evaluations_evaluated import (
    SimulatePolicyEvaluationsEvaluated,
)
from okta.models.simulate_policy_evaluations_undefined import (
    SimulatePolicyEvaluationsUndefined,
)
from okta.models.simulate_policy_result import SimulatePolicyResult


class SimulatePolicyEvaluations(BaseModel):
    """
    SimulatePolicyEvaluations
    """  # noqa: E501

    status: Optional[StrictStr] = Field(
        default=None, description="The result of this entity evaluation"
    )
    policy_type: Optional[List[PolicyType]] = Field(
        default=None,
        description="The policy type of the simulate operation",
        alias="policyType",
    )
    result: Optional[SimulatePolicyResult] = None
    undefined: Optional[SimulatePolicyEvaluationsUndefined] = None
    evaluated: Optional[SimulatePolicyEvaluationsEvaluated] = None
    __properties: ClassVar[List[str]] = [
        "status",
        "policyType",
        "result",
        "undefined",
        "evaluated",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["MATCH", "NOT_MATCH", "UNDEFINED"]):
            raise ValueError(
                "must be one of enum values ('MATCH', 'NOT_MATCH', 'UNDEFINED')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimulatePolicyEvaluations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            if not isinstance(self.result, dict):
                _dict["result"] = self.result.to_dict()
            else:
                _dict["result"] = self.result

        # override the default output from pydantic by calling `to_dict()` of undefined
        if self.undefined:
            if not isinstance(self.undefined, dict):
                _dict["undefined"] = self.undefined.to_dict()
            else:
                _dict["undefined"] = self.undefined

        # override the default output from pydantic by calling `to_dict()` of evaluated
        if self.evaluated:
            if not isinstance(self.evaluated, dict):
                _dict["evaluated"] = self.evaluated.to_dict()
            else:
                _dict["evaluated"] = self.evaluated

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimulatePolicyEvaluations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "status": obj.get("status"),
                "policyType": obj.get("policyType"),
                "result": (
                    SimulatePolicyResult.from_dict(obj["result"])
                    if obj.get("result") is not None
                    else None
                ),
                "undefined": (
                    SimulatePolicyEvaluationsUndefined.from_dict(obj["undefined"])
                    if obj.get("undefined") is not None
                    else None
                ),
                "evaluated": (
                    SimulatePolicyEvaluationsEvaluated.from_dict(obj["evaluated"])
                    if obj.get("evaluated") is not None
                    else None
                ),
            }
        )
        return _obj
