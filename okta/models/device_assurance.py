# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from importlib import import_module
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing import TYPE_CHECKING

from pydantic import BaseModel, ConfigDict, Field, StrictStr

from okta.models.links_self import LinksSelf
from okta.models.platform import Platform

if TYPE_CHECKING:
    from okta.models.device_assurance_android_platform import (
        DeviceAssuranceAndroidPlatform,
    )
    from okta.models.device_assurance_chrome_os_platform import (
        DeviceAssuranceChromeOSPlatform,
    )
    from okta.models.device_assurance_ios_platform import DeviceAssuranceIOSPlatform
    from okta.models.device_assurance_mac_os_platform import (
        DeviceAssuranceMacOSPlatform,
    )
    from okta.models.device_assurance_windows_platform import (
        DeviceAssuranceWindowsPlatform,
    )


class DeviceAssurance(BaseModel):
    """
    DeviceAssurance
    """  # noqa: E501

    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    created_date: Optional[StrictStr] = Field(default=None, alias="createdDate")
    id: Optional[StrictStr] = None
    last_updated_by: Optional[StrictStr] = Field(default=None, alias="lastUpdatedBy")
    last_updated_date: Optional[StrictStr] = Field(
        default=None, alias="lastUpdatedDate"
    )
    name: Optional[StrictStr] = Field(
        default=None, description="Display name of the Device Assurance Policy"
    )
    platform: Optional[Platform] = None
    links: Optional[LinksSelf] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = [
        "createdBy",
        "createdDate",
        "id",
        "lastUpdatedBy",
        "lastUpdatedDate",
        "name",
        "platform",
        "_links",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = "platform"

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        "ANDROID": "DeviceAssuranceAndroidPlatform",
        "CHROMEOS": "DeviceAssuranceChromeOSPlatform",
        "IOS": "DeviceAssuranceIOSPlatform",
        "MACOS": "DeviceAssuranceMacOSPlatform",
        "WINDOWS": "DeviceAssuranceWindowsPlatform",
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[
        Union[
            DeviceAssuranceAndroidPlatform,
            DeviceAssuranceChromeOSPlatform,
            DeviceAssuranceIOSPlatform,
            DeviceAssuranceMacOSPlatform,
            DeviceAssuranceWindowsPlatform,
        ]
    ]:
        """Create an instance of DeviceAssurance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "created_by",
                "created_date",
                "id",
                "last_updated_by",
                "last_updated_date",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            if not isinstance(self.links, dict):
                _dict["_links"] = self.links.to_dict()
            else:
                _dict["_links"] = self.links

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[
        Union[
            DeviceAssuranceAndroidPlatform,
            DeviceAssuranceChromeOSPlatform,
            DeviceAssuranceIOSPlatform,
            DeviceAssuranceMacOSPlatform,
            DeviceAssuranceWindowsPlatform,
        ]
    ]:
        """Create an instance of DeviceAssurance from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type == "DeviceAssuranceAndroidPlatform":
            return import_module(
                "okta.models.device_assurance_android_platform"
            ).DeviceAssuranceAndroidPlatform.from_dict(obj)
        if object_type == "DeviceAssuranceChromeOSPlatform":
            return import_module(
                "okta.models.device_assurance_chrome_os_platform"
            ).DeviceAssuranceChromeOSPlatform.from_dict(obj)
        if object_type == "DeviceAssuranceIOSPlatform":
            return import_module(
                "okta.models.device_assurance_ios_platform"
            ).DeviceAssuranceIOSPlatform.from_dict(obj)
        if object_type == "DeviceAssuranceMacOSPlatform":
            return import_module(
                "okta.models.device_assurance_mac_os_platform"
            ).DeviceAssuranceMacOSPlatform.from_dict(obj)
        if object_type == "DeviceAssuranceWindowsPlatform":
            return import_module(
                "okta.models.device_assurance_windows_platform"
            ).DeviceAssuranceWindowsPlatform.from_dict(obj)

        raise ValueError(
            "DeviceAssurance failed to lookup discriminator value from " +
            json.dumps(obj) +
            ". Discriminator property name: " +
            cls.__discriminator_property_name +
            ", mapping: " +
            json.dumps(cls.__discriminator_value_class_map)
        )
