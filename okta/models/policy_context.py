# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from okta.models.policy_context_device import PolicyContextDevice
from okta.models.policy_context_groups import PolicyContextGroups
from okta.models.policy_context_risk import PolicyContextRisk
from okta.models.policy_context_user import PolicyContextUser
from okta.models.policy_context_zones import PolicyContextZones


class PolicyContext(BaseModel):
    """
    PolicyContext
    """  # noqa: E501

    user: PolicyContextUser
    groups: PolicyContextGroups
    risk: Optional[PolicyContextRisk] = None
    ip: Optional[StrictStr] = Field(
        default=None, description="The network rule condition, zone, or IP address"
    )
    zones: Optional[PolicyContextZones] = None
    device: Optional[PolicyContextDevice] = None
    __properties: ClassVar[List[str]] = [
        "user",
        "groups",
        "risk",
        "ip",
        "zones",
        "device",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            if not isinstance(self.user, dict):
                _dict["user"] = self.user.to_dict()
            else:
                _dict["user"] = self.user

        # override the default output from pydantic by calling `to_dict()` of groups
        if self.groups:
            if not isinstance(self.groups, dict):
                _dict["groups"] = self.groups.to_dict()
            else:
                _dict["groups"] = self.groups

        # override the default output from pydantic by calling `to_dict()` of risk
        if self.risk:
            if not isinstance(self.risk, dict):
                _dict["risk"] = self.risk.to_dict()
            else:
                _dict["risk"] = self.risk

        # override the default output from pydantic by calling `to_dict()` of zones
        if self.zones:
            if not isinstance(self.zones, dict):
                _dict["zones"] = self.zones.to_dict()
            else:
                _dict["zones"] = self.zones

        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            if not isinstance(self.device, dict):
                _dict["device"] = self.device.to_dict()
            else:
                _dict["device"] = self.device

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "user": (
                    PolicyContextUser.from_dict(obj["user"])
                    if obj.get("user") is not None
                    else None
                ),
                "groups": (
                    PolicyContextGroups.from_dict(obj["groups"])
                    if obj.get("groups") is not None
                    else None
                ),
                "risk": (
                    PolicyContextRisk.from_dict(obj["risk"])
                    if obj.get("risk") is not None
                    else None
                ),
                "ip": obj.get("ip"),
                "zones": (
                    PolicyContextZones.from_dict(obj["zones"])
                    if obj.get("zones") is not None
                    else None
                ),
                "device": (
                    PolicyContextDevice.from_dict(obj["device"])
                    if obj.get("device") is not None
                    else None
                ),
            }
        )
        return _obj
