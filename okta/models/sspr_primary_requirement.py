# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self

from okta.models.authenticator_method_constraint import AuthenticatorMethodConstraint


class SsprPrimaryRequirement(BaseModel):
    """
    Defines the authenticators permitted for the initial authentication step of password recovery
    """  # noqa: E501

    methods: Optional[List[StrictStr]] = Field(
        default=None,
        description="Authenticator methods allowed for the initial authentication "
                    "step of password recovery",
    )
    method_constraints: Optional[List[AuthenticatorMethodConstraint]] = Field(
        default=None,
        description="Constraints on the values "
                    "specified in the `methods` array. Specifying a constraint limits methods to specific authenticator(s). "
                    "Currently, Google OTP is the only accepted constraint.",
        alias="methodConstraints",
    )
    __properties: ClassVar[List[str]] = ["methods", "methodConstraints"]

    @field_validator("methods")
    def methods_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(["push", "sms", "voice", "email"]):
                raise ValueError(
                    "each list item must be one of ('push', 'sms', 'voice', 'email')"
                )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SsprPrimaryRequirement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in method_constraints (list)
        _items = []
        if self.method_constraints:
            for _item in self.method_constraints:
                if _item:
                    _items.append(_item.to_dict())
            _dict["methodConstraints"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SsprPrimaryRequirement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "methods": obj.get("methods"),
                "methodConstraints": (
                    [
                        AuthenticatorMethodConstraint.from_dict(_item)
                        for _item in obj["methodConstraints"]
                    ]
                    if obj.get("methodConstraints") is not None
                    else None
                ),
            }
        )
        return _obj
