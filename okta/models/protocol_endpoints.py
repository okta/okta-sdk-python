# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Self

from okta.models.protocol_endpoint import ProtocolEndpoint


class ProtocolEndpoints(BaseModel):
    """
    ProtocolEndpoints
    """  # noqa: E501

    acs: Optional[ProtocolEndpoint] = None
    authorization: Optional[ProtocolEndpoint] = None
    jwks: Optional[ProtocolEndpoint] = None
    metadata: Optional[ProtocolEndpoint] = None
    slo: Optional[ProtocolEndpoint] = None
    sso: Optional[ProtocolEndpoint] = None
    token: Optional[ProtocolEndpoint] = None
    user_info: Optional[ProtocolEndpoint] = Field(default=None, alias="userInfo")
    __properties: ClassVar[List[str]] = [
        "acs",
        "authorization",
        "jwks",
        "metadata",
        "slo",
        "sso",
        "token",
        "userInfo",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProtocolEndpoints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of acs
        if self.acs:
            if not isinstance(self.acs, dict):
                _dict["acs"] = self.acs.to_dict()
            else:
                _dict["acs"] = self.acs

        # override the default output from pydantic by calling `to_dict()` of authorization
        if self.authorization:
            if not isinstance(self.authorization, dict):
                _dict["authorization"] = self.authorization.to_dict()
            else:
                _dict["authorization"] = self.authorization

        # override the default output from pydantic by calling `to_dict()` of jwks
        if self.jwks:
            if not isinstance(self.jwks, dict):
                _dict["jwks"] = self.jwks.to_dict()
            else:
                _dict["jwks"] = self.jwks

        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            if not isinstance(self.metadata, dict):
                _dict["metadata"] = self.metadata.to_dict()
            else:
                _dict["metadata"] = self.metadata

        # override the default output from pydantic by calling `to_dict()` of slo
        if self.slo:
            if not isinstance(self.slo, dict):
                _dict["slo"] = self.slo.to_dict()
            else:
                _dict["slo"] = self.slo

        # override the default output from pydantic by calling `to_dict()` of sso
        if self.sso:
            if not isinstance(self.sso, dict):
                _dict["sso"] = self.sso.to_dict()
            else:
                _dict["sso"] = self.sso

        # override the default output from pydantic by calling `to_dict()` of token
        if self.token:
            if not isinstance(self.token, dict):
                _dict["token"] = self.token.to_dict()
            else:
                _dict["token"] = self.token

        # override the default output from pydantic by calling `to_dict()` of user_info
        if self.user_info:
            if not isinstance(self.user_info, dict):
                _dict["userInfo"] = self.user_info.to_dict()
            else:
                _dict["userInfo"] = self.user_info

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProtocolEndpoints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "acs": (
                    ProtocolEndpoint.from_dict(obj["acs"])
                    if obj.get("acs") is not None
                    else None
                ),
                "authorization": (
                    ProtocolEndpoint.from_dict(obj["authorization"])
                    if obj.get("authorization") is not None
                    else None
                ),
                "jwks": (
                    ProtocolEndpoint.from_dict(obj["jwks"])
                    if obj.get("jwks") is not None
                    else None
                ),
                "metadata": (
                    ProtocolEndpoint.from_dict(obj["metadata"])
                    if obj.get("metadata") is not None
                    else None
                ),
                "slo": (
                    ProtocolEndpoint.from_dict(obj["slo"])
                    if obj.get("slo") is not None
                    else None
                ),
                "sso": (
                    ProtocolEndpoint.from_dict(obj["sso"])
                    if obj.get("sso") is not None
                    else None
                ),
                "token": (
                    ProtocolEndpoint.from_dict(obj["token"])
                    if obj.get("token") is not None
                    else None
                ),
                "userInfo": (
                    ProtocolEndpoint.from_dict(obj["userInfo"])
                    if obj.get("userInfo") is not None
                    else None
                ),
            }
        )
        return _obj
