# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from importlib import import_module
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing import TYPE_CHECKING

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr

from okta.models.lifecycle_status import LifecycleStatus
from okta.models.policy_rule_type import PolicyRuleType

if TYPE_CHECKING:
    from okta.models.access_policy_rule import AccessPolicyRule
    from okta.models.idp_discovery_policy_rule import IdpDiscoveryPolicyRule
    from okta.models.password_policy_rule import PasswordPolicyRule
    from okta.models.profile_enrollment_policy_rule import ProfileEnrollmentPolicyRule
    from okta.models.authorization_server_policy_rule import (
        AuthorizationServerPolicyRule,
    )
    from okta.models.okta_sign_on_policy_rule import OktaSignOnPolicyRule


class PolicyRule(BaseModel):
    """
    PolicyRule
    """  # noqa: E501

    created: Optional[datetime] = Field(
        default=None, description="Timestamp when the rule was created"
    )
    id: Optional[StrictStr] = Field(default=None, description="Identifier for the rule")
    last_updated: Optional[datetime] = Field(
        default=None,
        description="Timestamp when the rule was last modified",
        alias="lastUpdated",
    )
    name: Optional[StrictStr] = Field(default=None, description="Name of the rule")
    priority: Optional[StrictInt] = Field(
        default=None, description="Priority of the rule"
    )
    status: Optional[LifecycleStatus] = None
    system: Optional[StrictBool] = Field(
        default=False,
        description="Specifies whether Okta created the Policy Rule (`system=true`). You "
                    "can't delete Policy Rules that have `system` set to `true`.",
    )
    type: Optional[PolicyRuleType] = None
    __properties: ClassVar[List[str]] = [
        "created",
        "id",
        "lastUpdated",
        "name",
        "priority",
        "status",
        "system",
        "type",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = "type"

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        "ACCESS_POLICY": "AccessPolicyRule",
        "IDP_DISCOVERY": "IdpDiscoveryPolicyRule",
        "PASSWORD": "PasswordPolicyRule",
        "PROFILE_ENROLLMENT": "ProfileEnrollmentPolicyRule",
        "RESOURCE_ACCESS": "AuthorizationServerPolicyRule",
        "SIGN_ON": "OktaSignOnPolicyRule",
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[
        Union[
            AccessPolicyRule,
            IdpDiscoveryPolicyRule,
            PasswordPolicyRule,
            ProfileEnrollmentPolicyRule,
            AuthorizationServerPolicyRule,
            OktaSignOnPolicyRule,
        ]
    ]:
        """Create an instance of PolicyRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "created",
                "last_updated",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict["created"] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict["lastUpdated"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[
        Union[
            AccessPolicyRule,
            IdpDiscoveryPolicyRule,
            PasswordPolicyRule,
            ProfileEnrollmentPolicyRule,
            AuthorizationServerPolicyRule,
            OktaSignOnPolicyRule,
        ]
    ]:
        """Create an instance of PolicyRule from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type == "AccessPolicyRule":
            return import_module(
                "okta.models.access_policy_rule"
            ).AccessPolicyRule.from_dict(obj)
        if object_type == "IdpDiscoveryPolicyRule":
            return import_module(
                "okta.models.idp_discovery_policy_rule"
            ).IdpDiscoveryPolicyRule.from_dict(obj)
        if object_type == "PasswordPolicyRule":
            return import_module(
                "okta.models.password_policy_rule"
            ).PasswordPolicyRule.from_dict(obj)
        if object_type == "ProfileEnrollmentPolicyRule":
            return import_module(
                "okta.models.profile_enrollment_policy_rule"
            ).ProfileEnrollmentPolicyRule.from_dict(obj)
        if object_type == "AuthorizationServerPolicyRule":
            return import_module(
                "okta.models.authorization_server_policy_rule"
            ).AuthorizationServerPolicyRule.from_dict(obj)
        if object_type == "OktaSignOnPolicyRule":
            return import_module(
                "okta.models.okta_sign_on_policy_rule"
            ).OktaSignOnPolicyRule.from_dict(obj)

        raise ValueError(
            "PolicyRule failed to lookup discriminator value from "
            + json.dumps(obj)
            + ". Discriminator property name: "
            + cls.__discriminator_property_name
            + ", mapping: "
            + json.dumps(cls.__discriminator_value_class_map)
        )
