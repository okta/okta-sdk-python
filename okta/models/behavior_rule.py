# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from importlib import import_module
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing import TYPE_CHECKING

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Annotated

from okta.models.behavior_rule_type import BehaviorRuleType
from okta.models.lifecycle_status import LifecycleStatus
from okta.models.links_self import LinksSelf

if TYPE_CHECKING:
    from okta.models.behavior_rule_anomalous_device import BehaviorRuleAnomalousDevice
    from okta.models.behavior_rule_anomalous_ip import BehaviorRuleAnomalousIP
    from okta.models.behavior_rule_anomalous_location import (
        BehaviorRuleAnomalousLocation,
    )
    from okta.models.behavior_rule_velocity import BehaviorRuleVelocity


class BehaviorRule(BaseModel):
    """
    BehaviorRule
    """  # noqa: E501

    created: Optional[datetime] = None
    id: Optional[StrictStr] = None
    last_updated: Optional[datetime] = Field(default=None, alias="lastUpdated")
    name: Annotated[str, Field(strict=True, max_length=128)]
    status: Optional[LifecycleStatus] = None
    type: BehaviorRuleType
    link: Optional[LinksSelf] = Field(default=None, alias="_link")
    __properties: ClassVar[List[str]] = [
        "created",
        "id",
        "lastUpdated",
        "name",
        "status",
        "type",
        "_link",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = "type"

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        "ANOMALOUS_DEVICE": "BehaviorRuleAnomalousDevice",
        "ANOMALOUS_IP": "BehaviorRuleAnomalousIP",
        "ANOMALOUS_LOCATION": "BehaviorRuleAnomalousLocation",
        "VELOCITY": "BehaviorRuleVelocity",
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[
        Union[
            BehaviorRuleAnomalousDevice,
            BehaviorRuleAnomalousIP,
            BehaviorRuleAnomalousLocation,
            BehaviorRuleVelocity,
        ]
    ]:
        """Create an instance of BehaviorRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "created",
                "id",
                "last_updated",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of link
        if self.link:
            if not isinstance(self.link, dict):
                _dict["_link"] = self.link.to_dict()
            else:
                _dict["_link"] = self.link

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[
        Union[
            BehaviorRuleAnomalousDevice,
            BehaviorRuleAnomalousIP,
            BehaviorRuleAnomalousLocation,
            BehaviorRuleVelocity,
        ]
    ]:
        """Create an instance of BehaviorRule from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type == "BehaviorRuleAnomalousDevice":
            return import_module(
                "okta.models.behavior_rule_anomalous_device"
            ).BehaviorRuleAnomalousDevice.from_dict(obj)
        if object_type == "BehaviorRuleAnomalousIP":
            return import_module(
                "okta.models.behavior_rule_anomalous_ip"
            ).BehaviorRuleAnomalousIP.from_dict(obj)
        if object_type == "BehaviorRuleAnomalousLocation":
            return import_module(
                "okta.models.behavior_rule_anomalous_location"
            ).BehaviorRuleAnomalousLocation.from_dict(obj)
        if object_type == "BehaviorRuleVelocity":
            return import_module(
                "okta.models.behavior_rule_velocity"
            ).BehaviorRuleVelocity.from_dict(obj)

        raise ValueError(
            "BehaviorRule failed to lookup discriminator value from " +
            json.dumps(obj) +
            ". Discriminator property name: " +
            cls.__discriminator_property_name +
            ", mapping: " +
            json.dumps(cls.__discriminator_value_class_map)
        )
