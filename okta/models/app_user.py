# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self

from okta.models.app_user_credentials import AppUserCredentials
from okta.models.app_user_status import AppUserStatus
from okta.models.app_user_sync_state import AppUserSyncState
from okta.models.links_app_and_user import LinksAppAndUser


class AppUser(BaseModel):
    """
    The App User object defines a user's app-specific profile and credentials for an app.
    """  # noqa: E501

    created: datetime = Field(
        description="Timestamp when the App User object was created"
    )
    credentials: Optional[AppUserCredentials] = None
    external_id: Optional[StrictStr] = Field(
        default=None,
        description="The ID of the user in the target app that's linked to the Okta "
                    "App User object. This value is the native app-specific identifier "
                    "or primary key for the user in the target app.  The `externalId` "
                    "is set during import when the user is confirmed (reconciled) or "
                    "during provisioning when the user has been successfully created "
                    "in the target app. This value isn't populated for SSO app "
                    "assignments (for example, SAML or SWA) because it isn't "
                    "synchronized with a target app.",
        alias="externalId",
    )
    id: Optional[StrictStr] = Field(
        default=None,
        description="Unique identifier of the App User object (only required for apps with "
                    "`signOnMode` or authentication schemes that don't require credentials)",
    )
    last_sync: Optional[datetime] = Field(
        default=None,
        description="Timestamp of the last synchronization operation. This value is only "
                    "updated for apps with the `IMPORT_PROFILE_UPDATES` or `PUSH "
                    "PROFILE_UPDATES` feature.",
        alias="lastSync",
    )
    last_updated: datetime = Field(
        description="Timestamp when App User was last updated", alias="lastUpdated"
    )
    password_changed: Optional[datetime] = Field(
        default=None,
        description="Timestamp when the App User password was last changed",
        alias="passwordChanged",
    )
    profile: Optional[Dict[str, Dict[str, Any]]] = Field(
        default=None,
        description="App user profiles are app-specific and can be "
                    "customized by the Profile Editor in the Admin "
                    "Console. SSO apps typically don't support app user "
                    "profiles, while apps with user provisioning features "
                    "have app-specific profiles. Properties that are "
                    "visible in the Admin Console for an app assignment "
                    "can also be assigned through the API. Some properties "
                    "are reference properties that are imported from the "
                    "target app and can't be configured.",
    )
    scope: StrictStr = Field(
        description="Toggles the assignment between user or group scope"
    )
    status: AppUserStatus
    status_changed: datetime = Field(
        description="Timestamp when the App User status was last changed",
        alias="statusChanged",
    )
    sync_state: Optional[AppUserSyncState] = Field(default=None, alias="syncState")
    embedded: Optional[Dict[str, Dict[str, Any]]] = Field(
        default=None,
        description="Embedded resources related to the App User using the "
                    "[JSON Hypertext Application Language]("
                    "https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
        alias="_embedded",
    )
    links: LinksAppAndUser = Field(alias="_links")
    __properties: ClassVar[List[str]] = [
        "created",
        "credentials",
        "externalId",
        "id",
        "lastSync",
        "lastUpdated",
        "passwordChanged",
        "profile",
        "scope",
        "status",
        "statusChanged",
        "syncState",
        "_embedded",
        "_links",
    ]

    @field_validator("scope")
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["USER", "GROUP"]):
            raise ValueError("must be one of enum values ('USER', 'GROUP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "created",
                "external_id",
                "last_sync",
                "last_updated",
                "password_changed",
                "status_changed",
                "embedded",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of credentials
        if self.credentials:
            if not isinstance(self.credentials, dict):
                _dict["credentials"] = self.credentials.to_dict()
            else:
                _dict["credentials"] = self.credentials

        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            if not isinstance(self.links, dict):
                _dict["_links"] = self.links.to_dict()
            else:
                _dict["_links"] = self.links

        # set to None if password_changed (nullable) is None
        # and model_fields_set contains the field
        if (
                self.password_changed is None
                and "password_changed" in self.model_fields_set
        ):
            _dict["passwordChanged"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "created": obj.get("created"),
                "credentials": (
                    AppUserCredentials.from_dict(obj["credentials"])
                    if obj.get("credentials") is not None
                    else None
                ),
                "externalId": obj.get("externalId"),
                "id": obj.get("id"),
                "lastSync": obj.get("lastSync"),
                "lastUpdated": obj.get("lastUpdated"),
                "passwordChanged": obj.get("passwordChanged"),
                "profile": obj.get("profile"),
                "scope": obj.get("scope"),
                "status": obj.get("status"),
                "statusChanged": obj.get("statusChanged"),
                "syncState": obj.get("syncState"),
                "_embedded": obj.get("_embedded"),
                "_links": (
                    LinksAppAndUser.from_dict(obj["_links"])
                    if obj.get("_links") is not None
                    else None
                ),
            }
        )
        return _obj
