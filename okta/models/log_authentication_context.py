# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Self

from okta.models.log_authentication_provider import LogAuthenticationProvider
from okta.models.log_credential_provider import LogCredentialProvider
from okta.models.log_credential_type import LogCredentialType
from okta.models.log_issuer import LogIssuer


class LogAuthenticationContext(BaseModel):
    """
    LogAuthenticationContext
    """  # noqa: E501

    authentication_provider: Optional[LogAuthenticationProvider] = Field(
        default=None, alias="authenticationProvider"
    )
    authentication_step: Optional[StrictInt] = Field(
        default=None, alias="authenticationStep"
    )
    credential_provider: Optional[LogCredentialProvider] = Field(
        default=None, alias="credentialProvider"
    )
    credential_type: Optional[LogCredentialType] = Field(
        default=None, alias="credentialType"
    )
    external_session_id: Optional[StrictStr] = Field(
        default=None, alias="externalSessionId"
    )
    interface: Optional[StrictStr] = None
    issuer: Optional[LogIssuer] = None
    __properties: ClassVar[List[str]] = [
        "authenticationProvider",
        "authenticationStep",
        "credentialProvider",
        "credentialType",
        "externalSessionId",
        "interface",
        "issuer",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogAuthenticationContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "authentication_step",
                "external_session_id",
                "interface",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of issuer
        if self.issuer:
            if not isinstance(self.issuer, dict):
                _dict["issuer"] = self.issuer.to_dict()
            else:
                _dict["issuer"] = self.issuer

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogAuthenticationContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "authenticationProvider": obj.get("authenticationProvider"),
                "authenticationStep": obj.get("authenticationStep"),
                "credentialProvider": obj.get("credentialProvider"),
                "credentialType": obj.get("credentialType"),
                "externalSessionId": obj.get("externalSessionId"),
                "interface": obj.get("interface"),
                "issuer": (
                    LogIssuer.from_dict(obj["issuer"])
                    if obj.get("issuer") is not None
                    else None
                ),
            }
        )
        return _obj
