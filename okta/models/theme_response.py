# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from okta.models.email_template_touch_point_variant import (
    EmailTemplateTouchPointVariant,
)
from okta.models.end_user_dashboard_touch_point_variant import (
    EndUserDashboardTouchPointVariant,
)
from okta.models.error_page_touch_point_variant import ErrorPageTouchPointVariant
from okta.models.links_self import LinksSelf
from okta.models.loading_page_touch_point_variant import LoadingPageTouchPointVariant
from okta.models.sign_in_page_touch_point_variant import SignInPageTouchPointVariant


class ThemeResponse(BaseModel):
    """
    ThemeResponse
    """  # noqa: E501

    background_image: Optional[StrictStr] = Field(default=None, alias="backgroundImage")
    email_template_touch_point_variant: Optional[EmailTemplateTouchPointVariant] = (
        Field(default=None, alias="emailTemplateTouchPointVariant")
    )
    end_user_dashboard_touch_point_variant: Optional[
        EndUserDashboardTouchPointVariant
    ] = Field(default=None, alias="endUserDashboardTouchPointVariant")
    error_page_touch_point_variant: Optional[ErrorPageTouchPointVariant] = Field(
        default=None, alias="errorPageTouchPointVariant"
    )
    favicon: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    loading_page_touch_point_variant: Optional[LoadingPageTouchPointVariant] = Field(
        default=None, alias="loadingPageTouchPointVariant"
    )
    logo: Optional[StrictStr] = None
    primary_color_contrast_hex: Optional[StrictStr] = Field(
        default=None, alias="primaryColorContrastHex"
    )
    primary_color_hex: Optional[StrictStr] = Field(
        default=None, alias="primaryColorHex"
    )
    secondary_color_contrast_hex: Optional[StrictStr] = Field(
        default=None, alias="secondaryColorContrastHex"
    )
    secondary_color_hex: Optional[StrictStr] = Field(
        default=None, alias="secondaryColorHex"
    )
    sign_in_page_touch_point_variant: Optional[SignInPageTouchPointVariant] = Field(
        default=None, alias="signInPageTouchPointVariant"
    )
    links: Optional[LinksSelf] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = [
        "backgroundImage",
        "emailTemplateTouchPointVariant",
        "endUserDashboardTouchPointVariant",
        "errorPageTouchPointVariant",
        "favicon",
        "id",
        "loadingPageTouchPointVariant",
        "logo",
        "primaryColorContrastHex",
        "primaryColorHex",
        "secondaryColorContrastHex",
        "secondaryColorHex",
        "signInPageTouchPointVariant",
        "_links",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ThemeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "background_image",
                "favicon",
                "id",
                "logo",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            if not isinstance(self.links, dict):
                _dict["_links"] = self.links.to_dict()
            else:
                _dict["_links"] = self.links

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ThemeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "backgroundImage": obj.get("backgroundImage"),
                "emailTemplateTouchPointVariant": obj.get(
                    "emailTemplateTouchPointVariant"
                ),
                "endUserDashboardTouchPointVariant": obj.get(
                    "endUserDashboardTouchPointVariant"
                ),
                "errorPageTouchPointVariant": obj.get("errorPageTouchPointVariant"),
                "favicon": obj.get("favicon"),
                "id": obj.get("id"),
                "loadingPageTouchPointVariant": obj.get("loadingPageTouchPointVariant"),
                "logo": obj.get("logo"),
                "primaryColorContrastHex": obj.get("primaryColorContrastHex"),
                "primaryColorHex": obj.get("primaryColorHex"),
                "secondaryColorContrastHex": obj.get("secondaryColorContrastHex"),
                "secondaryColorHex": obj.get("secondaryColorHex"),
                "signInPageTouchPointVariant": obj.get("signInPageTouchPointVariant"),
                "_links": (
                    LinksSelf.from_dict(obj["_links"])
                    if obj.get("_links") is not None
                    else None
                ),
            }
        )
        return _obj
