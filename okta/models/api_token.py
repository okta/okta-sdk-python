# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Annotated
from typing_extensions import Self

from okta.models.links_self import LinksSelf


class ApiToken(BaseModel):
    """
    An API token for an Okta User. This token is NOT scoped any further and can be used for any API the user has
    permissions to call.
    """  # noqa: E501

    client_name: Optional[StrictStr] = Field(default=None, alias="clientName")
    created: Optional[datetime] = None
    expires_at: Optional[datetime] = Field(default=None, alias="expiresAt")
    id: Optional[StrictStr] = None
    last_updated: Optional[datetime] = Field(default=None, alias="lastUpdated")
    name: StrictStr
    token_window: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None,
        description="A time duration specified as an ["
                    "ISO-8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).",
        alias="tokenWindow",
    )
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    link: Optional[LinksSelf] = Field(default=None, alias="_link")
    __properties: ClassVar[List[str]] = [
        "clientName",
        "created",
        "expiresAt",
        "id",
        "lastUpdated",
        "name",
        "tokenWindow",
        "userId",
        "_link",
    ]

    @field_validator("token_window")
    def token_window_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(
                r"^P(?!$)(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?$",
                value,
        ):
            raise ValueError(
                r"must validate the regular expression /^P(?!$)(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?$/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiToken from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "client_name",
                "created",
                "expires_at",
                "id",
                "last_updated",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of link
        if self.link:
            if not isinstance(self.link, dict):
                _dict["_link"] = self.link.to_dict()
            else:
                _dict["_link"] = self.link

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiToken from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "clientName": obj.get("clientName"),
                "created": obj.get("created"),
                "expiresAt": obj.get("expiresAt"),
                "id": obj.get("id"),
                "lastUpdated": obj.get("lastUpdated"),
                "name": obj.get("name"),
                "tokenWindow": obj.get("tokenWindow"),
                "userId": obj.get("userId"),
                "_link": (
                    LinksSelf.from_dict(obj["_link"])
                    if obj.get("_link") is not None
                    else None
                ),
            }
        )
        return _obj
