# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from okta.models.links_self import LinksSelf


class JsonWebKey(BaseModel):
    """
    JsonWebKey
    """  # noqa: E501

    alg: Optional[StrictStr] = None
    created: Optional[datetime] = None
    e: Optional[StrictStr] = None
    expires_at: Optional[datetime] = Field(default=None, alias="expiresAt")
    key_ops: Optional[List[StrictStr]] = None
    kid: Optional[StrictStr] = None
    kty: Optional[StrictStr] = None
    last_updated: Optional[datetime] = Field(default=None, alias="lastUpdated")
    n: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    use: Optional[StrictStr] = None
    x5c: Optional[List[StrictStr]] = None
    x5t: Optional[StrictStr] = None
    x5t_s256: Optional[StrictStr] = Field(default=None, alias="x5t#S256")
    x5u: Optional[StrictStr] = None
    links: Optional[LinksSelf] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = [
        "alg",
        "created",
        "e",
        "expiresAt",
        "key_ops",
        "kid",
        "kty",
        "lastUpdated",
        "n",
        "status",
        "use",
        "x5c",
        "x5t",
        "x5t#S256",
        "x5u",
        "_links",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonWebKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            if not isinstance(self.links, dict):
                _dict["_links"] = self.links.to_dict()
            else:
                _dict["_links"] = self.links

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonWebKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "alg": obj.get("alg"),
                "created": obj.get("created"),
                "e": obj.get("e"),
                "expiresAt": obj.get("expiresAt"),
                "key_ops": obj.get("key_ops"),
                "kid": obj.get("kid"),
                "kty": obj.get("kty"),
                "lastUpdated": obj.get("lastUpdated"),
                "n": obj.get("n"),
                "status": obj.get("status"),
                "use": obj.get("use"),
                "x5c": obj.get("x5c"),
                "x5t": obj.get("x5t"),
                "x5t#S256": obj.get("x5t#S256"),
                "x5u": obj.get("x5u"),
                "_links": (
                    LinksSelf.from_dict(obj["_links"])
                    if obj.get("_links") is not None
                    else None
                ),
            }
        )
        return _obj
