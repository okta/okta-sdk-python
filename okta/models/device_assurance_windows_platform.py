# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import ConfigDict, Field, StrictBool
from typing_extensions import Self

from okta.models.device_assurance import DeviceAssurance
from okta.models.device_assurance_android_platform_all_of_disk_encryption_type import (
    DeviceAssuranceAndroidPlatformAllOfDiskEncryptionType,
)
from okta.models.device_assurance_android_platform_all_of_screen_lock_type import (
    DeviceAssuranceAndroidPlatformAllOfScreenLockType,
)
from okta.models.device_assurance_windows_platform_all_of_third_party_signal_providers import (
    DeviceAssuranceWindowsPlatformAllOfThirdPartySignalProviders,
)
from okta.models.links_self import LinksSelf
from okta.models.os_version import OSVersion


class DeviceAssuranceWindowsPlatform(DeviceAssurance):
    """
    DeviceAssuranceWindowsPlatform
    """  # noqa: E501

    disk_encryption_type: Optional[
        DeviceAssuranceAndroidPlatformAllOfDiskEncryptionType
    ] = Field(default=None, alias="diskEncryptionType")
    jailbreak: Optional[StrictBool] = None
    os_version: Optional[OSVersion] = Field(default=None, alias="osVersion")
    screen_lock_type: Optional[DeviceAssuranceAndroidPlatformAllOfScreenLockType] = (
        Field(default=None, alias="screenLockType")
    )
    secure_hardware_present: Optional[StrictBool] = Field(
        default=None, alias="secureHardwarePresent"
    )
    third_party_signal_providers: Optional[
        DeviceAssuranceWindowsPlatformAllOfThirdPartySignalProviders
    ] = Field(default=None, alias="thirdPartySignalProviders")
    __properties: ClassVar[List[str]] = [
        "createdBy",
        "createdDate",
        "id",
        "lastUpdatedBy",
        "lastUpdatedDate",
        "name",
        "platform",
        "_links",
        "diskEncryptionType",
        "jailbreak",
        "osVersion",
        "screenLockType",
        "secureHardwarePresent",
        "thirdPartySignalProviders",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceAssuranceWindowsPlatform from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            if not isinstance(self.links, dict):
                _dict["_links"] = self.links.to_dict()
            else:
                _dict["_links"] = self.links

        # override the default output from pydantic by calling `to_dict()` of disk_encryption_type
        if self.disk_encryption_type:
            if not isinstance(self.disk_encryption_type, dict):
                _dict["diskEncryptionType"] = self.disk_encryption_type.to_dict()
            else:
                _dict["diskEncryptionType"] = self.disk_encryption_type

        # override the default output from pydantic by calling `to_dict()` of os_version
        if self.os_version:
            if not isinstance(self.os_version, dict):
                _dict["osVersion"] = self.os_version.to_dict()
            else:
                _dict["osVersion"] = self.os_version

        # override the default output from pydantic by calling `to_dict()` of screen_lock_type
        if self.screen_lock_type:
            if not isinstance(self.screen_lock_type, dict):
                _dict["screenLockType"] = self.screen_lock_type.to_dict()
            else:
                _dict["screenLockType"] = self.screen_lock_type

        # override the default output from pydantic by calling `to_dict()` of third_party_signal_providers
        if self.third_party_signal_providers:
            if not isinstance(self.third_party_signal_providers, dict):
                _dict["thirdPartySignalProviders"] = (
                    self.third_party_signal_providers.to_dict()
                )
            else:
                _dict["thirdPartySignalProviders"] = self.third_party_signal_providers

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceAssuranceWindowsPlatform from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "createdBy": obj.get("createdBy"),
                "createdDate": obj.get("createdDate"),
                "id": obj.get("id"),
                "lastUpdatedBy": obj.get("lastUpdatedBy"),
                "lastUpdatedDate": obj.get("lastUpdatedDate"),
                "name": obj.get("name"),
                "platform": obj.get("platform"),
                "_links": (
                    LinksSelf.from_dict(obj["_links"])
                    if obj.get("_links") is not None
                    else None
                ),
                "diskEncryptionType": (
                    DeviceAssuranceAndroidPlatformAllOfDiskEncryptionType.from_dict(
                        obj["diskEncryptionType"]
                    )
                    if obj.get("diskEncryptionType") is not None
                    else None
                ),
                "jailbreak": obj.get("jailbreak"),
                "osVersion": (
                    OSVersion.from_dict(obj["osVersion"])
                    if obj.get("osVersion") is not None
                    else None
                ),
                "screenLockType": (
                    DeviceAssuranceAndroidPlatformAllOfScreenLockType.from_dict(
                        obj["screenLockType"]
                    )
                    if obj.get("screenLockType") is not None
                    else None
                ),
                "secureHardwarePresent": obj.get("secureHardwarePresent"),
                "thirdPartySignalProviders": (
                    DeviceAssuranceWindowsPlatformAllOfThirdPartySignalProviders.from_dict(
                        obj["thirdPartySignalProviders"]
                    )
                    if obj.get("thirdPartySignalProviders") is not None
                    else None
                ),
            }
        )
        return _obj
