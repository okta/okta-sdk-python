# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from okta.models.group_schema_definitions import GroupSchemaDefinitions
from okta.models.links_self import LinksSelf
from okta.models.user_schema_properties import UserSchemaProperties


class GroupSchema(BaseModel):
    """
    GroupSchema
    """  # noqa: E501

    var_schema: Optional[StrictStr] = Field(default=None, alias="$schema")
    created: Optional[StrictStr] = None
    definitions: Optional[GroupSchemaDefinitions] = None
    description: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    last_updated: Optional[StrictStr] = Field(default=None, alias="lastUpdated")
    name: Optional[StrictStr] = None
    properties: Optional[UserSchemaProperties] = None
    title: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    links: Optional[LinksSelf] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = [
        "$schema",
        "created",
        "definitions",
        "description",
        "id",
        "lastUpdated",
        "name",
        "properties",
        "title",
        "type",
        "_links",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroupSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "var_schema",
                "created",
                "id",
                "last_updated",
                "name",
                "type",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of definitions
        if self.definitions:
            if not isinstance(self.definitions, dict):
                _dict["definitions"] = self.definitions.to_dict()
            else:
                _dict["definitions"] = self.definitions

        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            if not isinstance(self.properties, dict):
                _dict["properties"] = self.properties.to_dict()
            else:
                _dict["properties"] = self.properties

        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            if not isinstance(self.links, dict):
                _dict["_links"] = self.links.to_dict()
            else:
                _dict["_links"] = self.links

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroupSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "$schema": obj.get("$schema"),
                "created": obj.get("created"),
                "definitions": (
                    GroupSchemaDefinitions.from_dict(obj["definitions"])
                    if obj.get("definitions") is not None
                    else None
                ),
                "description": obj.get("description"),
                "id": obj.get("id"),
                "lastUpdated": obj.get("lastUpdated"),
                "name": obj.get("name"),
                "properties": (
                    UserSchemaProperties.from_dict(obj["properties"])
                    if obj.get("properties") is not None
                    else None
                ),
                "title": obj.get("title"),
                "type": obj.get("type"),
                "_links": (
                    LinksSelf.from_dict(obj["_links"])
                    if obj.get("_links") is not None
                    else None
                ),
            }
        )
        return _obj
