# The Okta software accompanied by this notice is provided pursuant to the following terms:
# Copyright Â© 2025-Present, Okta, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
# License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# coding: utf-8

"""
Okta Admin Management

Allows customers to easily access the Okta Management APIs

The version of the OpenAPI document: 5.1.0
Contact: devex-public@okta.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Self

from okta.models.application_credentials_scheme import ApplicationCredentialsScheme
from okta.models.application_credentials_signing import ApplicationCredentialsSigning
from okta.models.application_credentials_username_template import (
    ApplicationCredentialsUsernameTemplate,
)
from okta.models.password_credential import PasswordCredential


class SchemeApplicationCredentials(BaseModel):
    """
    SchemeApplicationCredentials
    """  # noqa: E501

    signing: Optional[ApplicationCredentialsSigning] = None
    user_name_template: Optional[ApplicationCredentialsUsernameTemplate] = Field(
        default=None, alias="userNameTemplate"
    )
    password: Optional[PasswordCredential] = None
    reveal_password: Optional[StrictBool] = Field(default=None, alias="revealPassword")
    scheme: Optional[ApplicationCredentialsScheme] = None
    user_name: Optional[StrictStr] = Field(default=None, alias="userName")
    __properties: ClassVar[List[str]] = [
        "signing",
        "userNameTemplate",
        "password",
        "revealPassword",
        "scheme",
        "userName",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SchemeApplicationCredentials from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of signing
        if self.signing:
            if not isinstance(self.signing, dict):
                _dict["signing"] = self.signing.to_dict()
            else:
                _dict["signing"] = self.signing

        # override the default output from pydantic by calling `to_dict()` of user_name_template
        if self.user_name_template:
            if not isinstance(self.user_name_template, dict):
                _dict["userNameTemplate"] = self.user_name_template.to_dict()
            else:
                _dict["userNameTemplate"] = self.user_name_template

        # override the default output from pydantic by calling `to_dict()` of password
        if self.password:
            if not isinstance(self.password, dict):
                _dict["password"] = self.password.to_dict()
            else:
                _dict["password"] = self.password

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SchemeApplicationCredentials from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "signing": (
                    ApplicationCredentialsSigning.from_dict(obj["signing"])
                    if obj.get("signing") is not None
                    else None
                ),
                "userNameTemplate": (
                    ApplicationCredentialsUsernameTemplate.from_dict(
                        obj["userNameTemplate"]
                    )
                    if obj.get("userNameTemplate") is not None
                    else None
                ),
                "password": (
                    PasswordCredential.from_dict(obj["password"])
                    if obj.get("password") is not None
                    else None
                ),
                "revealPassword": obj.get("revealPassword"),
                "scheme": obj.get("scheme"),
                "userName": obj.get("userName"),
            }
        )
        return _obj
