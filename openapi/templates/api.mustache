# coding: utf-8

"""
    {{appName}}

    {{appDescription}}

    The version of the OpenAPI document: {{appVersion}}
    Contact: {{infoEmail}}
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated
from urllib.parse import urlencode

{{#imports}}
{{import}}
{{/imports}}

from {{packageName}}.api_client import ApiClient, RequestSerialized
from {{packageName}}.api_response import ApiResponse
from {{packageName}}.rest import RESTResponseType
from {{packageName}}.utils import format_url

{{#returnsApplication}}
from {{packageName}}.constants import find_app_model
{{/returnsApplication}}
{{#returnsUserFactor}}
from {{packageName}}.constants import find_factor_model
{{/returnsUserFactor}}
{{#returnsPolicy}}
from {{packageName}}.constants import find_policy_model
{{/returnsPolicy}}
{{#returnsPolicyRule}}
from {{packageName}}.constants import find_policy_rule_model
{{/returnsPolicyRule}}


{{#operations}}
class {{classname}}(ApiClient):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, configuration) -> None:
        super().__init__(configuration=configuration)

{{#operation}}
    @validate_call
    async def {{operationId}}(
        self,
        {{#allParams}}
        {{#description}}
        {{paramName}}: Annotated[Optional[{{dataType}}], Field(description="{{{.}}}")] = None,
        {{/description}}
        {{^description}}
        {{paramName}}: {{{dataType}}}{{^required}} = None{{/required}},
        {{/description}}
        {{/allParams}}
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0
    ) -> {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}None{{/returnType}}:
        """{{{summary}}}

        {{{notes}}}
        """ # noqa: E501

        method, url, header_params, body, post_params = self._{{operationId}}_serialize(
            {{#allParams}}
            {{paramName}}={{paramName}},
            {{/allParams}}
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        form = {}
        {{#isUserSchemaOperation}}
        keep_empty_params = True
        {{/isUserSchemaOperation}}
        {{^isUserSchemaOperation}}
        keep_empty_params = False
        {{/isUserSchemaOperation}}

        request, error = {{#asyncio}}await {{/asyncio}}self._request_executor.create_request(
            method, url, body, header_params, form, keep_empty_params=keep_empty_params
        )

        if error:
        {{#returnType}}
            return (None, None, error)
        {{/returnType}}
        {{^returnType}}
            return (None, error)
        {{/returnType}}

        {{#returnType}}
        response, error = {{#asyncio}}await {{/asyncio}}self._request_executor.execute(request, {{returnBaseType}})
        {{/returnType}}
        {{^returnType}}
        response, error = {{#asyncio}}await {{/asyncio}}self._request_executor.execute(request)
        {{/returnType}}

        if error:
        {{#returnType}}
            return (None, response, error)
        {{/returnType}}
        {{^returnType}}
            return (response, error)
        {{/returnType}}

        {{#returnType}}
        try:
            {{#isArray}}
            result = []
            for item in response.get_body():
                response_body = self.form_response_body(item)
                {{#isApplication}}
                sign_on_mode, name = response_body.get("signOnMode"), response_body.get("name")
                result.append(
                    find_app_model(sign_on_mode, name)(response_body)
                )
                {{/isApplication}}
                {{#isUserFactor}}
                factor_type = response_body.get("factorType")
                result.append(
                    find_factor_model(factor_type)(response_body)
                )
                {{/isUserFactor}}
                {{#isPolicy}}
                policy_type = response_body.get("type")
                result.append(
                    find_policy_model(policy_type)(response_body)
                )
                {{/isPolicy}}
                {{#isPolicyRule}}
                rule_type = response_body.get("type")
                result.append(
                    find_policy_rule_model(rule_type)(response_body)
                )
                {{/isPolicyRule}}
                {{#isOtherModel}}
                result.append({{returnBaseType}}(response_body))
                {{/isOtherModel}}
            {{/isArray}}
            {{^isArray}}
            body = response.get_body()
            response_body = self.form_response_body(body)
            {{#isApplication}}
            sign_on_mode, name = response_body.get("signOnMode"), response_body.get("name")
            result = find_app_model(sign_on_mode, name)(response_body)
            {{/isApplication}}
            {{#isUserFactor}}
            factor_type = response_body.get("factorType")
            result = find_factor_model(factor_type)(response_body)
            {{/isUserFactor}}
            {{#isPolicy}}
            policy_type = response_body.get("type")
            result = find_policy_model(policy_type)(response_body)
            {{/isPolicy}}
            {{#isPolicyRule}}
            rule_type = response_body.get("type")
            result = find_policy_rule_model(rule_type)(response_body)
            {{/isPolicyRule}}
            {{#isOtherModel}}
            result = {{returnBaseType}}(response_body)
            {{/isOtherModel}}
            {{/isArray}}
        except Exception as e:
            return (None, response, e)
        return (result, response, None)
        {{/returnType}}
        {{^returnType}}
        return (response, None)
        {{/returnType}}

    def _{{operationId}}_serialize(
        self,
        {{#allParams}}
        {{paramName}},
        {{/allParams}}
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple[str, str, Dict[str, Optional[str]], Optional[bytes], List[Tuple[str, str]]]:

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        # process the path parameters
        {{#pathParams}}
        if {{paramName}} is not None:
            _path_params['{{baseName}}'] = {{paramName}}
        {{/pathParams}}

        # process the query parameters
        {{#queryParams}}
        if {{paramName}} is not None:
            _query_params.append(('{{baseName}}', {{paramName}}))
        {{/queryParams}}

        # process the header parameters
        {{#headerParams}}
        if {{paramName}} is not None:
            _header_params['{{baseName}}'] = {{paramName}}
        {{/headerParams}}

        # process the body parameter
        {{#bodyParam}}
        if {{paramName}} is not None:
            if isinstance({{paramName}}, dict):
                _body_params = {{paramName}}
            else:
                _body_params = {{paramName}}.as_dict()
        {{/bodyParam}}

        # set the HTTP header `Accept`
        {{#hasProduces}}
        _header_params['Accept'] = self.select_header_accept(
            [{{#produces}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/produces}}]
        )
        {{/hasProduces}}

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = self.select_header_content_type(
                [{{#consumes}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/consumes}}]
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        api_url = format_url(f"{self._base_url}{{{path}}}")
        if _query_params:
            encoded_query_params = urlencode(_query_params)
            api_url += f"/?{encoded_query_params}"

        return (
            '{{httpMethod}}',
            api_url,
            _header_params,
            _body_params,
            _form_params
        )
{{/operation}}
{{/operations}}