# coding: utf-8

{{>partial_header}}
import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated
from urllib.parse import urlencode

{{#imports}}
{{import}}
{{/imports}}

from {{packageName}}.api_client import ApiClient, RequestSerialized
from {{packageName}}.api_response import ApiResponse
from {{packageName}}.rest import RESTResponseType
from {{packageName}}.utils import format_url
from {{packageName}}.constants import find_app_model, find_factor_model, find_policy_rule_model, find_policy_model

{{#operations}}
class {{classname}}(ApiClient):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, configuration) -> None:
        super().__init__(configuration=configuration)
{{#operation}}


    @validate_call
    async def {{operationId}}{{>partial_api_args}} -> {{{returnType}}}{{^returnType}}None{{/returnType}}:
        """{{{summary}}}

        {{{notes}}}
        """ # noqa: E501

        method, url, header_params, body, post_params = self._{{operationId}}_serialize(
            {{#allParams}}
            {{paramName}}={{paramName}},
            {{/allParams}}
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        form = {}
        keep_empty_params = False

        request, error = await self._request_executor.create_request(
            method, url, body, header_params, form, keep_empty_params=keep_empty_params
        )

        if error:
        {{#returnType}}
            return (None, None, error)
        {{/returnType}}
        {{^returnType}}
            return (None, error)
        {{/returnType}}

        {{#returnType}}
        response, error = await self._request_executor.execute(request, {{returnBaseType}})
        {{/returnType}}
        {{^returnType}}
        response, error = await self._request_executor.execute(request)
        {{/returnType}}

        if error:
        {{#returnType}}
            return (None, response, error)
        {{/returnType}}
        {{^returnType}}
            return (response, error)
        {{/returnType}}

        {{#returnType}}
        try:
            {{^isArray}}
            result = []
            for item in response.get_body():
                response_body = self.form_response_body(item)
                if "signOnMode" in item:
                    result.append(
                        find_app_model(item["signOnMode"], item["name"])(
                            response_body
                        )
                    )
                elif "factorType" in item:
                    result.append(
                        find_factor_model(item["factorType"])(
                            self.form_response_body(item)
                        )
                    )
                elif "type" in item:
                    if "rule" in url:
                        result.append(
                            find_policy_rule_model(item["type"])(
                                self.form_response_body(item)
                            )
                        )
                    else:
                        result.append(
                            find_policy_model(item["type"])(
                                self.form_response_body(item)
                            )
                        )
                else:
                    result.append(self.model(response_body))
            {{/isArray}}
            {{#isArray}}
            body = response.get_body()
            response_body = self.form_response_body(body)
            if "signOnMode" in body:
                result = find_app_model(body["signOnMode"], body["name"])(
                    self.form_response_body(body)
                )
            elif "factorType" in item:
                body = self.form_response_body(response.get_body())
                result = find_factor_model(body["factorType"])(body)
            elif "type" in item:
                if "rule" in url:
                    body = self.form_response_body(response.get_body())
                    result = find_policy_rule_model(body["type"])(body)
                else:
                    body = self.form_response_body(response.get_body())
                    result = find_policy_model(body["type"])(body)
            else:
                result = {{returnBaseType}}(response_body)
            {{/isArray}}
        except Exception as e:
            return (None, response, e)
        return (result, response, None)
        {{/returnType}}
        {{^returnType}}
        return (response, None)
        {{/returnType}}


    @validate_call
    async def {{operationId}}_with_http_info{{>partial_api_args}} -> ApiResponse[{{{returnType}}}{{^returnType}}None{{/returnType}}]:
        """{{{summary}}}

        {{{notes}}}
        """ # noqa: E501

        method, url, header_params, body, post_params = self._{{operationId}}_serialize(
            {{#allParams}}
            {{paramName}}={{paramName}},
            {{/allParams}}
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        form = {}
        keep_empty_params = False

        request, error = await self._request_executor.create_request(
            method, url, body, header_params, form, keep_empty_params=keep_empty_params
        )

        if error:
        {{#returnType}}
            return (None, None, error)
        {{/returnType}}
        {{^returnType}}
            return (None, error)
        {{/returnType}}

        {{#returnType}}
        response, error = await self._request_executor.execute(request, {{returnBaseType}})
        {{/returnType}}
        {{^returnType}}
        response, error = await self._request_executor.execute(request)
        {{/returnType}}

        if error:
        {{#returnType}}
            return (None, response, error)
        {{/returnType}}
        {{^returnType}}
            return (response, error)
        {{/returnType}}

        {{#returnType}}
        try:
            {{#isArray}}
            result = []
            for item in response.get_body():
                response_body = self.form_response_body(item)
                if "signOnMode" in item:
                    result.append(
                        find_app_model(item["signOnMode"], item["name"])(
                            response_body
                        )
                    )
                elif "factorType" in item:
                    result.append(
                        find_factor_model(item["factorType"])(
                            self.form_response_body(item)
                        )
                    )
                elif "type" in item:
                    if "rule" in url:
                        result.append(
                            find_policy_rule_model(item["type"])(
                                self.form_response_body(item)
                            )
                        )
                    else:
                        result.append(
                            find_policy_model(item["type"])(
                                self.form_response_body(item)
                            )
                        )
                else:
                    result.append(self.model(response_body))
            {{/isArray}}
            {{^isArray}}
            body = response.get_body()
            response_body = self.form_response_body(body)
            if "signOnMode" in body:
                result = find_app_model(body["signOnMode"], body["name"])(
                    self.form_response_body(body)
                )
            elif "factorType" in item:
                body = self.form_response_body(response.get_body())
                result = find_factor_model(body["factorType"])(body)
            elif "type" in item:
                if "rule" in url:
                    body = self.form_response_body(response.get_body())
                    result = find_policy_rule_model(body["type"])(body)
                else:
                    body = self.form_response_body(response.get_body())
                    result = find_policy_model(body["type"])(body)
            else:
                result = {{returnBaseType}}(response_body)
            {{/isArray}}
        except Exception as e:
            return (None, response, e)
        return (result, response, None)
        {{/returnType}}
        {{^returnType}}
        return (response, None)
        {{/returnType}}


    @validate_call
    async def {{operationId}}_without_preload_content{{>partial_api_args}} -> RESTResponseType:
        """{{{summary}}}

        {{{notes}}}
        """ # noqa: E501

        method, url, header_params, body, post_params = self._{{operationId}}_serialize(
            {{#allParams}}
            {{paramName}}={{paramName}},
            {{/allParams}}
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        form = {}
        keep_empty_params = False

        request, error = await self._request_executor.create_request(
            method, url, body, header_params, form, keep_empty_params=keep_empty_params
        )

        if error:
        {{#returnType}}
            return (None, None, error)
        {{/returnType}}
        {{^returnType}}
            return (None, error)
        {{/returnType}}

        {{#returnType}}
        response, error = await self._request_executor.execute(request, {{returnBaseType}})
        {{/returnType}}
        {{^returnType}}
        response, error = await self._request_executor.execute(request)
        {{/returnType}}

        if error:
        {{#returnType}}
            return (None, response, error)
        {{/returnType}}
        {{^returnType}}
            return (response, error)
        {{/returnType}}

        {{#returnType}}
        try:
            {{#isArray}}
            result = []
            for item in response.get_body():
                response_body = self.form_response_body(item)
                if "signOnMode" in item:
                    result.append(
                        find_app_model(item["signOnMode"], item["name"])(
                            response_body
                        )
                    )
                elif "factorType" in item:
                    result.append(
                        find_factor_model(item["factorType"])(
                            self.form_response_body(item)
                        )
                    )
                elif "type" in item:
                    if "rule" in url:
                        result.append(
                            find_policy_rule_model(item["type"])(
                                self.form_response_body(item)
                            )
                        )
                    else:
                        result.append(
                            find_policy_model(item["type"])(
                                self.form_response_body(item)
                            )
                        )
                else:
                    result.append(self.model(response_body))
            {{/isArray}}
            {{^isArray}}
            body = response.get_body()
            response_body = self.form_response_body(body)
            if "signOnMode" in body:
                result = find_app_model(body["signOnMode"], body["name"])(
                    self.form_response_body(body)
                )
            elif "factorType" in item:
                body = self.form_response_body(response.get_body())
                result = find_factor_model(body["factorType"])(body)
            elif "type" in item:
                if "rule" in url:
                    body = self.form_response_body(response.get_body())
                    result = find_policy_rule_model(body["type"])(body)
                else:
                    body = self.form_response_body(response.get_body())
                    result = find_policy_model(body["type"])(body)
            else:
                result = {{returnBaseType}}(response_body)
            {{/isArray}}
        except Exception as e:
            return (None, response, e)
        return (result, response, None)
        {{/returnType}}
        {{^returnType}}
        return (response, None)
        {{/returnType}}


    def _{{operationId}}_serialize(
        self,
        {{#allParams}}
        {{paramName}},
        {{/allParams}}
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        {{#servers.0}}
        _hosts = [{{#servers}}
            '{{{url}}}'{{^-last}},{{/-last}}{{/servers}}
        ]
        _host = _hosts[_host_index]
        {{/servers.0}}
        {{^servers.0}}
        _host = None
        {{/servers.0}}

        _collection_formats: Dict[str, str] = {
            {{#allParams}}
            {{#isArray}}
            '{{baseName}}': '{{collectionFormat}}',
            {{/isArray}}
            {{/allParams}}
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
{{#pathParams}}
        if {{paramName}} is not None:
            _path_params['{{baseName}}'] = {{paramName}}{{#isEnumRef}}.value{{/isEnumRef}}
{{/pathParams}}
        # process the query parameters
{{#queryParams}}
        if {{paramName}} is not None:
            {{#isDateTime}}
            if isinstance({{paramName}}, datetime):
                _query_params.append(
                    (
                        '{{baseName}}',
                        {{paramName}}.strftime(
                            self.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('{{baseName}}', {{paramName}}))
            {{/isDateTime}}
            {{#isDate}}
            if isinstance({{paramName}}, date):
                _query_params.append(
                    (
                        '{{baseName}}',
                        {{paramName}}.strftime(
                            self.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('{{baseName}}', {{paramName}}))
            {{/isDate}}
            {{^isDateTime}}{{^isDate}}
            _query_params.append(('{{baseName}}', {{paramName}}{{#isEnumRef}}.value{{/isEnumRef}}))
            {{/isDate}}{{/isDateTime}}
{{/queryParams}}
        # process the header parameters
{{#headerParams}}
        if {{paramName}} is not None:
            _header_params['{{baseName}}'] = {{paramName}}
{{/headerParams}}
        # process the form parameters
{{#formParams}}
        if {{paramName}} is not None:
            {{#isFile}}
            _files['{{{baseName}}}'] = {{paramName}}
            {{/isFile}}
            {{^isFile}}
            _form_params.append(('{{{baseName}}}', {{paramName}}))
            {{/isFile}}
{{/formParams}}
        # process the body parameter
{{#bodyParam}}
        if {{paramName}} is not None:
            {{#isBinary}}
            # convert to byte array if the input is a file name (str)
            if isinstance({{paramName}}, str):
                with open({{paramName}}, "rb") as _fp:
                    _body_params = _fp.read()
            else:
                _body_params = {{paramName}}
            {{/isBinary}}
            {{^isBinary}}
            _body_params = {{paramName}}
            {{/isBinary}}
{{/bodyParam}}

        {{#constantParams}}
        {{#isQueryParam}}
        # Set client side default value of Query Param "{{baseName}}".
        _query_params['{{baseName}}'] = {{#_enum}}'{{{.}}}'{{/_enum}}
        {{/isQueryParam}}
        {{#isHeaderParam}}
        # Set client side default value of Header Param "{{baseName}}".
        _header_params['{{baseName}}'] = {{#_enum}}'{{{.}}}'{{/_enum}}
        {{/isHeaderParam}}
        {{/constantParams}}

        {{#hasProduces}}
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.select_header_accept(
            [{{#produces}}
                '{{{mediaType}}}'{{^-last}}, {{/-last}}{{/produces}}
            ]
        )
        {{/hasProduces}}

        {{#hasConsumes}}
        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.select_header_content_type(
                    [{{#consumes}}
                        '{{{mediaType}}}'{{^-last}}, {{/-last}}{{/consumes}}
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type
        {{/hasConsumes}}

        # authentication setting
        _auth_settings: List[str] = [{{#authMethods}}
            '{{name}}'{{^-last}}, {{/-last}}{{/authMethods}}
        ]

        return self.param_serialize(
            method='{{httpMethod}}',
            resource_path='{{{path}}}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


{{/operation}}
{{/operations}}
