# flake8: noqa
{{> partials.copyrightHeader }}
{{#if (ne model.enum undefined)}}

{{#if (eq model.modelName "ApplicationSignOnMode")}}
from aenum import Enum, extend_enum


class {{pascalCase model.modelName}}(
    {{model.type}},
    Enum
):
    """
    An enumeration class for {{pascalCase model.modelName}}.
    """

    {{#each model.enum as |enum|}}
    {{{replaceColons (upperCase (snakeCase enum))}}} = "{{enum}}"
    {{/each}}

    @classmethod
    def _missing_(cls, value):
        value_upper_case = value.upper()
        try:
            return getattr(cls, value_upper_case)
        except:
            extend_enum(ApplicationSignOnMode, value_upper_case, value_upper_case)
            return getattr(cls, value_upper_case)
{{else}}
from aenum import MultiValueEnum


class {{pascalCase model.modelName}}(
    {{model.type}},
    MultiValueEnum
):
    """
    An enumeration class for {{pascalCase model.modelName}}.
    """

    {{#each model.enum as |enum|}}
    {{{replaceColons (upperCase (snakeCase enum))}}} = "{{enum}}", "{{oppositeCase enum}}"
    {{/each}}
{{/if}}
{{else}}

{{#if (ne model.extends undefined)}}
from okta.models.{{snakeCase model.extends}}\
    import {{model.extends}}
{{else}}
from okta.okta_object import OktaObject
{{/if}}
{{#if (eq model.modelName "UserProfile")}}

from okta.helpers import to_snake_case, to_lower_camel_case
{{/if}}
{{#if (ne model.policyType undefined)}}
from okta.models.policy_type import PolicyType
{{/if}}
{{#if (ne model.hasCollection undefined)}}
from okta.okta_collection import OktaCollection
{{/if}}
{{#each subTypes as |type|}}
from okta.models import {{snakeCase type}}\
    as {{snakeCase type}}
{{/each}}


class {{pascalCase model.modelName}}(
    {{#if (ne model.extends undefined)}}
    {{model.extends}}
    {{else}}
    OktaObject
    {{/if}}
):
    """
    A class for {{pascalCase model.modelName}} objects.
    """
    {{#if (eq model.modelName "UserProfile")}}

    BASIC_ATTRIBUTES = (
        {{#each model.properties as |prop|}}
        "{{camelCase prop.propertyName}}",
        {{/each}}
    )
    {{/if}}

    def __init__(self, config=None):
        super().__init__(config)
        {{#if (eq model.modelName "SmsTemplateTranslations")}}
        if config:
            for lang in config.keys():
                setattr(self, lang, config[lang])
        {{else}}
        {{#if (gt model.properties.length 0)}}
        if config:
            {{#if (ne model.signOnMode undefined)}}
            self.sign_on_mode = "{{model.signOnMode}}"
            {{/if}}
            {{#if (ne model.factorType undefined)}}
            self.factor_type = "{{model.factorType}}"
            {{/if}}
            {{#if (ne model.policyType undefined)}}
            self.type = PolicyType("{{upperCase model.policyType}}")
            {{/if}}
            {{#if (ne model.policyRuleType undefined)}}
            self.type = "{{upperCase model.policyRuleType}}"
            {{/if}}
            {{#each model.properties as |prop|}}
            {{#if (eq prop.isArray true) }}
            self.{{snakeCase prop.propertyName}} = OktaCollection.form_list(
                config["{{camelCase prop.propertyName}}"] if "{{camelCase prop.propertyName}}"\
                    in config else [],
                {{#if (ne prop.specialType undefined)}}
                {{prop.specialType}}
                {{else}}
                {{{prop.model}}}
                {{/if}}
            )
            {{else}}
            {{#if (exists prop "$ref")}}
            if "{{camelCase prop.propertyName}}" in config:
                if isinstance(config["{{camelCase prop.propertyName}}"],
                              {{snakeCase prop.model}}.{{pascalCase prop.model}}):
                    self.{{snakeCase prop.propertyName}} = config["{{camelCase prop.propertyName}}"]
                elif config["{{camelCase prop.propertyName}}"] is not None:
                    {{#if (eq prop.commonType "enum")}}
                    self.{{snakeCase prop.propertyName}} = {{snakeCase prop.model}}.{{pascalCase prop.model}}(
                        config["{{camelCase prop.propertyName}}"].upper()
                    )
                    {{else}}
                    self.{{snakeCase prop.propertyName}} = {{snakeCase prop.model}}.{{pascalCase prop.model}}(
                        config["{{camelCase prop.propertyName}}"]
                    )
                    {{/if}}
                else:
                    self.{{snakeCase prop.propertyName}} = None
            else:
                self.{{snakeCase prop.propertyName}} = None
            {{else}}
            {{#if (ne prop.default undefined) }}
            self.{{snakeCase prop.propertyName}} = config["{{camelCase prop.propertyName}}"]\
                if "{{camelCase prop.propertyName}}" in config else {{{prop.default}}}
            {{else}}
            self.{{snakeCase prop.propertyName}} = config["{{camelCase prop.propertyName}}"]\
                if "{{camelCase prop.propertyName}}" in config else None
            {{/if}}
            {{/if}}
            {{/if}}
            {{/each}}
            {{#if (eq model.modelName "UserProfile")}}
            # set custom attributes not defined in model, do not change string case
            for attr_name in config:
                lower_camel_case = to_lower_camel_case(attr_name)
                if lower_camel_case not in UserProfile.BASIC_ATTRIBUTES:
                    setattr(self, attr_name, config[attr_name])
            {{/if}}
        else:
            {{#each model.properties as |prop|}}
            {{#if (ne prop.default undefined) }}
            self.{{snakeCase prop.propertyName}} = {{{prop.default}}}
            {{else}}
            {{#if (eq prop.isArray true) }}
            self.{{snakeCase prop.propertyName}} = []
            {{else}}
            self.{{snakeCase prop.propertyName}} = None
            {{/if}}
            {{/if}}
            {{/each}}
        {{else}}
        pass
        {{/if}}
        {{/if}}

    def request_format(self):
        parent_req_format = super().request_format()
        {{#if (eq model.modelName "SmsTemplateTranslations")}}
        current_obj_format = vars(self)
        {{else}}
        current_obj_format = {
            {{#each model.properties as |prop|}}
            "{{prop.propertyName}}": self.{{snakeCase prop.propertyName}}{{#unless @last}},{{/unless}}
            {{/each}}
        }
        {{/if}}
        {{#if (eq model.modelName "UserProfile")}}
        available_attrs = vars(self)
        for attr in available_attrs:
            # do not allow overriding of base attributes
            if not attr in current_obj_format:
                current_obj_format[attr] = getattr(self, attr)
        {{/if}}
        parent_req_format.update(current_obj_format)
        return parent_req_format
    {{#if (eq model.modelName "UserProfile")}}

    def __getattr__(self, attr_name):
        """
        Try different cases for backward compatibility.
        """
        available_attrs = vars(self)
        snake_case = to_snake_case(attr_name)
        if snake_case in available_attrs:
            return available_attrs[snake_case]
        lower_camel_case = to_lower_camel_case(attr_name)
        if lower_camel_case in available_attrs:
            return available_attrs[lower_camel_case]
        raise AttributeError(f"'UserProfile' object has no attribute '{attr_name}'")

    def __setattr__(self, attr_name, attr_value):
        """
        Keep custom attributes unchanged and keep backward compatibility for basic attributes.
        """
        lower_camel_case = to_lower_camel_case(attr_name)
        if lower_camel_case in UserProfile.BASIC_ATTRIBUTES:
            super(UserProfile, self).__setattr__(lower_camel_case, attr_value)
        else:
            super(UserProfile, self).__setattr__(attr_name, attr_value)
    {{/if}}
{{/if}}
